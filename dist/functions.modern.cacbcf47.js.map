{"mappings":"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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-465c92acdecadfde.js","node_modules/@gltf-transform/functions/dist/functions.modern.js","node_modules/@gltf-transform/functions/src/utils.ts","node_modules/@gltf-transform/functions/src/center.ts","node_modules/@gltf-transform/functions/src/colorspace.ts","node_modules/@gltf-transform/functions/src/dedup.ts","node_modules/@gltf-transform/functions/src/dequantize.ts","node_modules/@gltf-transform/functions/src/inspect.ts","node_modules/@gltf-transform/functions/src/instance.ts","node_modules/@gltf-transform/functions/src/metal-rough.ts","node_modules/@gltf-transform/functions/src/prune.ts","node_modules/@gltf-transform/functions/src/partition.ts","node_modules/@gltf-transform/functions/src/quantize.ts","node_modules/@gltf-transform/functions/src/resample.ts","node_modules/@gltf-transform/functions/src/reorder.ts","node_modules/@gltf-transform/functions/src/sequence.ts","node_modules/@gltf-transform/functions/src/tangents.ts","node_modules/@gltf-transform/functions/src/texture-resize.ts","node_modules/@gltf-transform/functions/src/unweld.ts","node_modules/@gltf-transform/functions/src/weld.ts","node_modules/ndarray-pixels/dist/ndarray-pixels-browser.modern.js","node_modules/ndarray-pixels/src/browser-save-pixels.ts","node_modules/ndarray-pixels/src/index.ts","node_modules/ndarray-pixels/src/browser-get-pixels.ts","node_modules/ndarray/ndarray.js","node_modules/iota-array/iota.js","node_modules/is-buffer/index.js","node_modules/ndarray-ops/ndarray-ops.js","node_modules/cwise-compiler/compiler.js","node_modules/cwise-compiler/lib/thunk.js","node_modules/cwise-compiler/lib/compile.js","node_modules/uniq/uniq.js","node_modules/ndarray-lanczos/dist/ndarray-lanczos.modern.js","node_modules/ndarray-lanczos/vendor/filters.ts","node_modules/ndarray-lanczos/src/convolve.ts","node_modules/ndarray-lanczos/src/index.ts"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"4a236f9275d0a351\";module.bundle.HMR_BUNDLE_ID = \"9d2732c1cacbcf47\";\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */\n\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: mixed;\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function accept(fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function dispose(fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData = undefined;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets\n/*: {|[string]: boolean|} */\n, acceptedAssets\n/*: {|[string]: boolean|} */\n, assetsToAccept\n/*: Array<[ParcelRequire, string]> */\n;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\n\nfunction getPort() {\n  return HMR_PORT || location.port;\n} // eslint-disable-next-line no-redeclare\n\n\nvar parent = module.bundle.parent;\n\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe\n\n  ws.onmessage = function (event\n  /*: {data: string, ...} */\n  ) {\n    checkedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    acceptedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    assetsToAccept = [];\n    var data\n    /*: HMRMessage */\n    = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n\n      var assets = data.assets.filter(function (asset) {\n        return asset.envHash === HMR_ENV_HASH;\n      }); // Handle HMR Update\n\n      var handled = assets.every(function (asset) {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n\n      if (handled) {\n        console.clear();\n        assets.forEach(function (asset) {\n          hmrApply(module.bundle.root, asset);\n        });\n\n        for (var i = 0; i < assetsToAccept.length; i++) {\n          var id = assetsToAccept[i][1];\n\n          if (!acceptedAssets[id]) {\n            hmrAcceptRun(assetsToAccept[i][0], id);\n          }\n        }\n      } else {\n        window.location.reload();\n      }\n    }\n\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var ansiDiagnostic = _step.value;\n          var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n          console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe\n\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n\n  ws.onerror = function (e) {\n    console.error(e.message);\n  };\n\n  ws.onclose = function () {\n    console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\n\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  var errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n\n  var _iterator2 = _createForOfIteratorHelper(diagnostics),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var diagnostic = _step2.value;\n      var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;\n      errorHTML += \"\\n      <div>\\n        <div style=\\\"font-size: 18px; font-weight: bold; margin-top: 20px;\\\">\\n          \\uD83D\\uDEA8 \".concat(diagnostic.message, \"\\n        </div>\\n        <pre>\").concat(stack, \"</pre>\\n        <div>\\n          \").concat(diagnostic.hints.map(function (hint) {\n        return '<div>💡 ' + hint + '</div>';\n      }).join(''), \"\\n        </div>\\n        \").concat(diagnostic.documentation ? \"<div>\\uD83D\\uDCDD <a style=\\\"color: violet\\\" href=\\\"\".concat(diagnostic.documentation, \"\\\" target=\\\"_blank\\\">Learn more</a></div>\") : '', \"\\n      </div>\\n    \");\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\n\nfunction getParents(bundle, id)\n/*: Array<[ParcelRequire, string]> */\n{\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction updateLink(link) {\n  var newLink = link.cloneNode();\n\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n\n  newLink.setAttribute('href', // $FlowFixMe\n  link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe\n\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\n\nvar cssTimeout = null;\n\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href\n      /*: string */\n      = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;\n\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n\n    cssTimeout = null;\n  }, 50);\n}\n\nfunction hmrApply(bundle\n/*: ParcelRequire */\n, asset\n/*:  HMRAsset */\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n\n    if (deps) {\n      var fn = new Function('require', 'module', 'exports', asset.output);\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\n\nfunction hmrAcceptCheck(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n\n  if (checkedAssets[id]) {\n    return true;\n  }\n\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  var parents = getParents(module.bundle.root, id); // If no parents, the asset is new. Prevent reloading the page.\n\n  if (!parents.length) {\n    return true;\n  }\n\n  return parents.some(function (v) {\n    return hmrAcceptCheck(v[0], v[1], null);\n  });\n}\n\nfunction hmrAcceptRun(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n  cached = bundle.cache[id];\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        // $FlowFixMe[method-unbinding]\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n\n  acceptedAssets[id] = true;\n}",null,"import { NdArray } from 'ndarray';\nimport { getPixels, savePixels } from 'ndarray-pixels';\nimport { Primitive, Texture, Transform, TransformContext } from '@gltf-transform/core';\n\n/**\n * Prepares a function used in an {@link Document.transform} pipeline. Use of this wrapper is\n * optional, and plain functions may be used in transform pipelines just as well. The wrapper is\n * used internally so earlier pipeline stages can detect and optimize based on later stages.\n */\nexport function createTransform(name: string, fn: Transform): Transform {\n\tObject.defineProperty(fn, 'name', { value: name });\n\treturn fn;\n}\n\nexport function isTransformPending(context: TransformContext | undefined, initial: string, pending: string): boolean {\n\tif (!context) return false;\n\tconst initialIndex = context.stack.lastIndexOf(initial);\n\tconst pendingIndex = context.stack.lastIndexOf(pending);\n\treturn initialIndex < pendingIndex;\n}\n\n/** Maps pixels from source to target textures, with a per-pixel callback. */\nexport async function rewriteTexture(\n\t\tsource: Texture,\n\t\ttarget: Texture,\n\t\tfn: (pixels: NdArray, i: number, j: number) => void): Promise<Texture|null> {\n\n\tif (!source) return null;\n\n\tconst srcImage = source.getImage();\n\tif (!srcImage) return null;\n\n\tconst pixels = await getPixels(srcImage, source.getMimeType());\n\n\tfor(let i = 0; i < pixels.shape[0]; ++i) {\n\t\tfor(let j = 0; j < pixels.shape[1]; ++j) {\n\t\t\tfn(pixels, i, j);\n\t\t}\n\t}\n\n\tconst dstImage = await savePixels(pixels, 'image/png');\n\treturn target.setImage(dstImage).setMimeType('image/png');\n}\n\nexport function getGLPrimitiveCount(prim: Primitive): number {\n\tconst indices = prim.getIndices();\n\tconst position = prim.getAttribute('POSITION')!;\n\n\t// Reference: https://www.khronos.org/opengl/wiki/Primitive\n\tswitch (prim.getMode()) {\n\t\tcase Primitive.Mode.POINTS:\n\t\t\treturn position.getCount();\n\t\tcase Primitive.Mode.LINES:\n\t\t\treturn indices\n\t\t\t\t? indices.getCount() / 2\n\t\t\t\t: position.getCount() / 2;\n\t\tcase Primitive.Mode.LINE_LOOP:\n\t\t\treturn position.getCount();\n\t\tcase Primitive.Mode.LINE_STRIP:\n\t\t\treturn position.getCount() - 1;\n\t\tcase Primitive.Mode.TRIANGLES:\n\t\t\treturn indices\n\t\t\t\t? indices.getCount() / 3\n\t\t\t\t: position.getCount() / 3;\n\t\tcase Primitive.Mode.TRIANGLE_STRIP:\n\t\tcase Primitive.Mode.TRIANGLE_FAN:\n\t\t\treturn position.getCount() - 2;\n\t\tdefault:\n\t\t\tthrow new Error('Unexpected mode: ' + prim.getMode());\n\t}\n}\n\nexport class SetMap<K, V> {\n\tprivate _map = new Map<K, Set<V>>();\n\tpublic get size(): number {\n\t\treturn this._map.size;\n\t}\n\tpublic has(k: K): boolean {\n\t\treturn this._map.has(k);\n\t}\n\tpublic add(k: K, v: V): this {\n\t\tlet entry = this._map.get(k);\n\t\tif (!entry) {\n\t\t\tentry = new Set();\n\t\t\tthis._map.set(k, entry);\n\t\t}\n\t\tentry.add(v);\n\t\treturn this;\n\t}\n\tpublic get(k: K): Set<V> {\n\t\treturn this._map.get(k) || new Set();\n\t}\n\tpublic keys(): Iterable<K> {\n\t\treturn this._map.keys();\n\t}\n}\n","import { Document, Transform, vec3 } from '@gltf-transform/core';\nimport { bounds } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'center';\n\n/** Options for the {@link center} function. */\nexport interface CenterOptions {\n\t/** Location on the model to be considered the pivot, and recentered at the origin. */\n\tpivot?: 'center' | 'above' | 'below' | vec3;\n}\n\nconst CENTER_DEFAULTS: Required<CenterOptions> = {pivot: 'center'};\n\n/**\n * Centers the {@link Scene} at the origin, or above/below it. Transformations from animation,\n * skinning, and morph targets are not taken into account.\n *\n * Example:\n *\n * ```ts\n * await document.transform(center({pivot: 'below'}));\n * ```\n */\nexport function center (_options: CenterOptions = CENTER_DEFAULTS): Transform {\n\tconst options = {...CENTER_DEFAULTS, ..._options} as Required<CenterOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst isAnimated = root.listAnimations().length > 0 || root.listSkins().length > 0;\n\n\t\tdoc.getRoot().listScenes().forEach((scene, index) => {\n\t\t\tlogger.debug(`${NAME}: Scene ${index + 1} / ${root.listScenes().length}.`);\n\n\t\t\tlet pivot: vec3;\n\t\t\tif (typeof options.pivot === 'string') {\n\t\t\t\tconst bbox = bounds(scene);\n\t\t\t\tpivot = [\n\t\t\t\t\t(bbox.max[0] - bbox.min[0]) / 2 + bbox.min[0],\n\t\t\t\t\t(bbox.max[1] - bbox.min[1]) / 2 + bbox.min[1],\n\t\t\t\t\t(bbox.max[2] - bbox.min[2]) / 2 + bbox.min[2],\n\t\t\t\t];\n\t\t\t\tif (options.pivot === 'above') pivot[1] = bbox.max[1];\n\t\t\t\tif (options.pivot === 'below') pivot[1] = bbox.min[1];\n\t\t\t} else {\n\t\t\t\tpivot = options.pivot as vec3;\n\t\t\t}\n\n\t\t\tlogger.debug(`${NAME}: Pivot \"${pivot.join(', ')}\".`);\n\n\t\t\tconst offset: vec3 = [-1 * pivot[0], -1 * pivot[1], -1 * pivot[2]];\n\n\t\t\tif (isAnimated) {\n\t\t\t\tlogger.debug(`${NAME}: Model contains animation or skin. Adding a wrapper node.`);\n\t\t\t\tconst offsetNode = doc.createNode('Pivot').setTranslation(offset);\n\t\t\t\tscene.listChildren().forEach((child) => offsetNode.addChild(child));\n\t\t\t\tscene.addChild(offsetNode);\n\t\t\t} else {\n\t\t\t\tlogger.debug(`${NAME}: Skipping wrapper, offsetting all root nodes.`);\n\t\t\t\tscene.listChildren().forEach((child) => {\n\t\t\t\t\tconst t = child.getTranslation();\n\t\t\t\t\tchild.setTranslation([\n\t\t\t\t\t\tt[0] + offset[0],\n\t\t\t\t\t\tt[1] + offset[1],\n\t\t\t\t\t\tt[2] + offset[2],\n\t\t\t\t\t]);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n\n};\n","import { Accessor, Document, Primitive, Transform, vec3 } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'colorspace';\n\n/** Options for the {@link colorspace} function. */\nexport interface ColorspaceOptions {\n\t/** Must be `\"sRGB\"`. Required. */\n    inputEncoding: string;\n}\n\n/**\n * Vertex color colorspace correction. The glTF format requires vertex colors to be stored\n * as linear values, and this function provides a way to correct vertex colors that are\n * (incorrectly) sRGB.\n */\nexport function colorspace (options: ColorspaceOptions): Transform {\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\n\t\tconst logger = doc.getLogger();\n\n\t\tif (options.inputEncoding === 'linear') {\n\t\t\tlogger.info(`${NAME}: Vertex colors already linear. Skipping conversion.`);\n\t\t\treturn;\n\t\t}\n\n\t\tif (options.inputEncoding !== 'sRGB') {\n\t\t\tlogger.error(\n\t\t\t\t`${NAME}: Unknown input encoding \"${options.inputEncoding}\" – should be \"sRGB\" or `\n\t\t\t\t+ '\"linear\". Skipping conversion.'\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tconst converted = new Set<Accessor>();\n\n\t\t// Source: THREE.Color\n\t\tfunction sRGBToLinear( c: number ): number {\n\n\t\t\treturn ( c < 0.04045 )\n\t\t\t\t? c * 0.0773993808\n\t\t\t\t: Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\n\n\t\t}\n\n\t\tfunction updatePrimitive(primitive: Primitive): void {\n\t\t\tconst color = [0, 0, 0] as vec3;\n\t\t\tlet attribute: Accessor | null;\n\t\t\tfor (let i = 0; (attribute = primitive.getAttribute(`COLOR_${i}`)); i++) {\n\t\t\t\tif (converted.has(attribute)) continue;\n\n\t\t\t\tfor (let j = 0; j < attribute.getCount(); j++) {\n\t\t\t\t\tattribute.getElement(j, color);\n\t\t\t\t\tcolor[0] = sRGBToLinear(color[0]);\n\t\t\t\t\tcolor[1] = sRGBToLinear(color[1]);\n\t\t\t\t\tcolor[2] = sRGBToLinear(color[2]);\n\t\t\t\t\tattribute.setElement(j, color);\n\t\t\t\t}\n\n\t\t\t\tconverted.add(attribute);\n\t\t\t}\n\t\t}\n\n\t\tdoc.getRoot()\n\t\t\t.listMeshes()\n\t\t\t.forEach((mesh) => mesh.listPrimitives().forEach(updatePrimitive));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\n\t});\n\n};\n","import { Accessor, BufferUtils, Document, Logger, Material, Mesh, Primitive, PrimitiveTarget, PropertyType, Root, Texture, Transform } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'dedup';\n\nexport interface DedupOptions {\n\t/** List of {@link PropertyType} identifiers to be de-duplicated.*/\n\tpropertyTypes: string[];\n}\n\nconst DEDUP_DEFAULTS: Required<DedupOptions> = {\n\tpropertyTypes: [\n\t\tPropertyType.ACCESSOR,\n\t\tPropertyType.MESH,\n\t\tPropertyType.TEXTURE,\n\t\tPropertyType.MATERIAL,\n\t],\n};\n\n/**\n * Removes duplicate {@link Accessor}, {@link Mesh}, {@link Texture}, and {@link Material}\n * properties. Partially based on a\n * [gist by mattdesl](https://gist.github.com/mattdesl/aea40285e2d73916b6b9101b36d84da8). Only\n * accessors in mesh primitives, morph targets, and animation samplers are processed.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listMeshes(); // → [Mesh, Mesh, Mesh]\n *\n * await document.transform(dedup({propertyTypes: [PropertyType.MESH]}));\n *\n * document.getRoot().listMeshes(); // → [Mesh]\n * ```\n */\nexport const dedup = function (_options: DedupOptions = DEDUP_DEFAULTS): Transform {\n\tconst options = {...DEDUP_DEFAULTS, ..._options} as Required<DedupOptions>;\n\n\tconst propertyTypes = new Set(options.propertyTypes);\n\tfor (const propertyType of options.propertyTypes) {\n\t\tif (!DEDUP_DEFAULTS.propertyTypes.includes(propertyType)) {\n\t\t\tthrow new Error(`${NAME}: Unsupported deduplication on type \"${propertyType}\".`);\n\t\t}\n\t}\n\n\treturn createTransform(NAME, (doc: Document): void =>  {\n\t\tconst logger = doc.getLogger();\n\n\t\tif (propertyTypes.has(PropertyType.ACCESSOR)) dedupAccessors(logger, doc);\n\t\tif (propertyTypes.has(PropertyType.MESH)) dedupMeshes(logger, doc);\n\t\tif (propertyTypes.has(PropertyType.TEXTURE)) dedupImages(logger, doc);\n\t\tif (propertyTypes.has(PropertyType.MATERIAL)) dedupMaterials(logger, doc);\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n\n};\n\nfunction dedupAccessors(logger: Logger, doc: Document): void {\n\t// Find all accessors used for mesh data.\n\tconst indicesAccessors: Set<Accessor> = new Set();\n\tconst attributeAccessors: Set<Accessor> = new Set();\n\tconst inputAccessors: Set<Accessor> = new Set();\n\tconst outputAccessors: Set<Accessor> = new Set();\n\n\tconst meshes = doc.getRoot().listMeshes();\n\tmeshes.forEach((mesh) => {\n\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\tprimitive.listAttributes().forEach((accessor) => (attributeAccessors.add(accessor)));\n\t\t\tconst indices = primitive.getIndices();\n\t\t\tif (indices) indicesAccessors.add(indices);\n\t\t});\n\t});\n\n\tfor (const animation of doc.getRoot().listAnimations()) {\n\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\tconst input = sampler.getInput();\n\t\t\tconst output = sampler.getOutput();\n\t\t\tif (input) inputAccessors.add(input);\n\t\t\tif (output) outputAccessors.add(output);\n\t\t}\n\t}\n\n\t// Find duplicate accessors of a given type.\n\tfunction detectDuplicates(accessors: Accessor[]): Map<Accessor, Accessor> {\n\t\tconst duplicateAccessors: Map<Accessor, Accessor> = new Map();\n\n\t\tfor (let i = 0; i < accessors.length; i++) {\n\t\t\tconst a = accessors[i];\n\t\t\tconst aData = BufferUtils.toView(a.getArray()!);\n\n\t\t\tif (duplicateAccessors.has(a)) continue;\n\n\t\t\tfor (let j = 0; j < accessors.length; j++) {\n\t\t\t\tconst b = accessors[j];\n\n\t\t\t\tif (a === b) continue;\n\t\t\t\tif (duplicateAccessors.has(b)) continue;\n\n\t\t\t\tif (a.getType() !== b.getType()) continue;\n\t\t\t\tif (a.getComponentType() !== b.getComponentType()) continue;\n\t\t\t\tif (a.getCount() !== b.getCount()) continue;\n\t\t\t\tif (a.getNormalized() !== b.getNormalized()) continue;\n\t\t\t\tif (BufferUtils.equals(aData, BufferUtils.toView(b.getArray()!))) {\n\t\t\t\t\tduplicateAccessors.set(b, a);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn duplicateAccessors;\n\t}\n\n\tconst duplicateIndices = detectDuplicates(Array.from(indicesAccessors));\n\tlogger.debug(\n\t\t`${NAME}: Found ${duplicateIndices.size} duplicates among ${indicesAccessors.size} indices.`\n\t);\n\n\tconst duplicateAttributes = detectDuplicates(Array.from(attributeAccessors));\n\tlogger.debug(\n\t\t`${NAME}: Found ${duplicateAttributes.size} duplicates among ${attributeAccessors.size}`\n\t\t+ ' attributes.'\n\t);\n\n\tconst duplicateInputs = detectDuplicates(Array.from(inputAccessors));\n\tconst duplicateOutputs = detectDuplicates(Array.from(outputAccessors));\n\tlogger.debug(\n\t\t`${NAME}: Found ${duplicateInputs.size + duplicateOutputs.size} duplicates among`\n\t\t+ ` ${inputAccessors.size + outputAccessors.size} animation accessors.`\n\t);\n\n\t// Dissolve duplicate vertex attributes and indices.\n\tmeshes.forEach((mesh) => {\n\t\tmesh.listPrimitives().forEach((primitive) => {\n\t\t\tprimitive.listAttributes().forEach((accessor) => {\n\t\t\t\tif (duplicateAttributes.has(accessor)) {\n\t\t\t\t\tprimitive.swap(accessor, duplicateAttributes.get(accessor) as Accessor);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst indices = primitive.getIndices();\n\t\t\tif (indices && duplicateIndices.has(indices)) {\n\t\t\t\tprimitive.swap(indices, duplicateIndices.get(indices) as Accessor);\n\t\t\t}\n\t\t});\n\t});\n\tArray.from(duplicateIndices.keys()).forEach((indices) => indices.dispose());\n\tArray.from(duplicateAttributes.keys()).forEach((attribute) => attribute.dispose());\n\n\t// Dissolve duplicate animation sampler inputs and outputs.\n\tfor (const animation of doc.getRoot().listAnimations()) {\n\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\tconst input = sampler.getInput();\n\t\t\tconst output = sampler.getOutput();\n\t\t\tif (input && duplicateInputs.has(input)) {\n\t\t\t\tsampler.swap(input, duplicateInputs.get(input) as Accessor);\n\t\t\t}\n\t\t\tif (output && duplicateOutputs.has(output)) {\n\t\t\t\tsampler.swap(output, duplicateOutputs.get(output) as Accessor);\n\t\t\t}\n\t\t}\n\t}\n\tArray.from(duplicateInputs.keys()).forEach((input) => input.dispose());\n\tArray.from(duplicateOutputs.keys()).forEach((output) => output.dispose());\n}\n\nfunction dedupMeshes(logger: Logger, doc: Document): void {\n\tconst root = doc.getRoot();\n\n\t// Create Reference -> ID lookup table.\n\tconst refs = new Map<Accessor|Material, number>();\n\troot.listAccessors().forEach((accessor, index) => refs.set(accessor, index));\n\troot.listMaterials().forEach((material, index) => refs.set(material, index));\n\n\t// For each mesh, create a hashkey.\n\tconst numMeshes = root.listMeshes().length;\n\tconst uniqueMeshes = new Map<string, Mesh>();\n\tfor (const src of root.listMeshes()) {\n\t\t// For each mesh, create a hashkey.\n\t\tconst srcKeyItems = [];\n\t\tfor (const prim of src.listPrimitives()) {\n\t\t\tsrcKeyItems.push(createPrimitiveKey(prim, refs));\n\t\t}\n\n\t\t// If another mesh exists with the same key, replace all instances with that, and dispose\n\t\t// of the duplicate. If not, just cache it.\n\t\tconst meshKey = srcKeyItems.join(';');\n\t\tif (uniqueMeshes.has(meshKey)) {\n\t\t\tconst targetMesh = uniqueMeshes.get(meshKey)!;\n\t\t\tsrc.listParents().forEach((parent) => {\n\t\t\t\tif (parent.propertyType !== PropertyType.ROOT) {\n\t\t\t\t\tparent.swap(src, targetMesh);\n\t\t\t\t}\n\t\t\t});\n\t\t\tsrc.dispose();\n\t\t} else {\n\t\t\tuniqueMeshes.set(meshKey, src);\n\t\t}\n\t}\n\n\tlogger.debug(\n\t\t`${NAME}: Found ${numMeshes - uniqueMeshes.size} duplicates among ${numMeshes} meshes.`\n\t);\n}\n\nfunction dedupImages(logger: Logger, doc: Document): void {\n\tconst root = doc.getRoot();\n\tconst textures = root.listTextures();\n\tconst duplicates: Map<Texture, Texture> = new Map();\n\n\t// Compare each texture to every other texture — O(n²) — and mark duplicates for replacement.\n\tfor (let i = 0; i < textures.length; i++) {\n\t\tconst a = textures[i];\n\t\tconst aData = a.getImage();\n\n\t\tif (duplicates.has(a)) continue;\n\n\t\tfor (let j = 0; j < textures.length; j++) {\n\t\t\tconst b = textures[j];\n\t\t\tconst bData = b.getImage();\n\n\t\t\tif (a === b) continue;\n\t\t\tif (duplicates.has(b)) continue;\n\n\t\t\t// URIs are intentionally not compared.\n\t\t\tif (a.getMimeType() !== b.getMimeType()) continue;\n\n\t\t\tconst aSize = a.getSize();\n\t\t\tconst bSize = b.getSize();\n\t\t\tif (!aSize || !bSize) continue;\n\t\t\tif (aSize[0] !== bSize[0]) continue;\n\t\t\tif (aSize[1] !== bSize[1]) continue;\n\t\t\tif (!aData || !bData) continue;\n\t\t\tif (BufferUtils.equals(aData, bData)) {\n\t\t\t\tduplicates.set(b, a);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogger.debug(\n\t\t`${NAME}: Found ${duplicates.size} duplicates among ${root.listTextures().length} textures.`\n\t);\n\n\tArray.from(duplicates.entries()).forEach(([src, dst]) => {\n\t\tsrc.listParents().forEach((property) => {\n\t\t\tif (!(property instanceof Root)) property.swap(src, dst);\n\t\t});\n\t\tsrc.dispose();\n\t});\n}\n\nfunction dedupMaterials(logger: Logger, doc: Document): void {\n\tconst root = doc.getRoot();\n\tconst materials = root.listMaterials();\n\tconst duplicates: Map<Material, Material> = new Map();\n\n\t// Compare each material to every other material — O(n²) — and mark duplicates for replacement.\n\tfor (let i = 0; i < materials.length; i++){\n\t\tconst a = materials[i];\n\n\t\tif (duplicates.has(a)) continue;\n\n\t\tfor (let j = 0; j < materials.length; j++){\n\t\t\tconst b = materials[j];\n\n\t\t\tif (a === b) continue;\n\t\t\tif (duplicates.has(b)) continue;\n\n\t\t\tif (a.equals(b)) {\n\t\t\t\tduplicates.set(b, a);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogger.debug(\n\t\t// eslint-disable-next-line max-len\n\t\t`${NAME}: Found ${duplicates.size} duplicates among ${root.listMaterials().length} materials.`\n\t);\n\n\tArray.from(duplicates.entries()).forEach(([src, dst]) => {\n\t\tsrc.listParents().forEach((property) => {\n\t\t\tif (!(property instanceof Root)) property.swap(src, dst);\n\t\t});\n\t\tsrc.dispose();\n\t});\n}\n\n/** Generates a key unique to the content of a primitive or target. */\nfunction createPrimitiveKey(\n\tprim: Primitive | PrimitiveTarget,\n\trefs: Map<Accessor|Material, number>\n): string {\n\tconst primKeyItems = [];\n\tfor (const semantic of prim.listSemantics()) {\n\t\tconst attribute = prim.getAttribute(semantic)!;\n\t\tprimKeyItems.push(semantic + ':' + refs.get(attribute));\n\t}\n\tif (prim instanceof Primitive) {\n\t\tconst indices = prim.getIndices();\n\t\tif (indices) {\n\t\t\tprimKeyItems.push('indices:' + refs.get(indices));\n\t\t}\n\t\tconst material = prim.getMaterial();\n\t\tif (material) {\n\t\t\tprimKeyItems.push('material:' + refs.get(material));\n\t\t}\n\t\tprimKeyItems.push('mode:' + prim.getMode());\n\t\tfor (const target of prim.listTargets()) {\n\t\t\tprimKeyItems.push('target:' + createPrimitiveKey(target, refs));\n\t\t}\n\t}\n\treturn primKeyItems.join(',');\n}\n","import { Accessor, Document, Primitive, Transform } from '@gltf-transform/core';\nimport { MeshQuantization } from '@gltf-transform/extensions';\nimport { createTransform } from './utils';\n\nconst NAME = 'dequantize';\n\n/** Options for the {@link dequantize} function. */\nexport interface DequantizeOptions {\n\t/**\n\t * Pattern (regex) used to filter vertex attribute semantics for quantization.\n\t * Default: `/^((?!JOINTS_).)*$/`.\n\t */\n\tpattern?: RegExp;\n}\n\nconst DEQUANTIZE_DEFAULTS: DequantizeOptions = {\n\tpattern: /^((?!JOINTS_).)*$/,\n};\n\n/**\n * Dequantize {@link Primitive Primitives}, removing {@link MeshQuantization `KHR_mesh_quantization`}\n * if present. Dequantization will increase the size of the mesh on disk and in memory, but may be\n * necessary for compatibility with applications that don't support quantization.\n */\nexport function dequantize(_options: DequantizeOptions = DEQUANTIZE_DEFAULTS): Transform {\n\tconst options = {...DEQUANTIZE_DEFAULTS, ..._options} as Required<DequantizeOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tdequantizePrimitive(prim, options);\n\t\t\t}\n\t\t}\n\t\tdoc.createExtension(MeshQuantization).dispose();\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction dequantizePrimitive(prim: Primitive, options: Required<DequantizeOptions>): void {\n\tfor (const semantic of prim.listSemantics()) {\n\t\tdequantizeAttribute(semantic, prim.getAttribute(semantic)!, options);\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const semantic of target.listSemantics()) {\n\t\t\tdequantizeAttribute(semantic, target.getAttribute(semantic)!, options);\n\t\t}\n\t}\n}\n\nfunction dequantizeAttribute(semantic: string, attribute: Accessor, options: Required<DequantizeOptions>): void {\n\tif (!attribute.getArray()) return;\n\tif (!options.pattern.test(semantic)) return;\n\tif (attribute.getComponentSize() >= 4) return;\n\n\tconst srcArray = attribute.getArray()!;\n\tconst dstArray = new Float32Array(srcArray.length);\n\n\tfor (let i = 0, il = attribute.getCount(), el = [] as number[]; i < il; i++) {\n\t\tel = attribute.getElement(i, el);\n\t\tattribute.setArray(dstArray).setElement(i, el).setArray(srcArray);\n\t}\n\n\tattribute.setArray(dstArray).setNormalized(false);\n}\n","import { Accessor, Document, ExtensionProperty, GLTF, ImageUtils, Texture, TypedArray, bounds } from '@gltf-transform/core';\nimport { getGLPrimitiveCount } from './utils';\n\n/** Inspects the contents of a glTF file and returns a JSON report. */\nexport function inspect (doc: Document): InspectReport {\n\treturn {\n\t\tscenes: listScenes(doc),\n\t\tmeshes: listMeshes(doc),\n\t\tmaterials: listMaterials(doc),\n\t\ttextures: listTextures(doc),\n\t\tanimations: listAnimations(doc),\n\t};\n}\n\n/** List scenes. */\nfunction listScenes (doc: Document): InspectPropertyReport<InspectSceneReport> {\n\tconst scenes = doc.getRoot().listScenes().map((scene) => {\n\t\tconst root = scene.listChildren()[0];\n\t\tconst sceneBounds = bounds(scene);\n\t\treturn {\n\t\t\tname: scene.getName(),\n\t\t\trootName: root ? root.getName() : '',\n\t\t\tbboxMin: toPrecision(sceneBounds.min),\n\t\t\tbboxMax: toPrecision(sceneBounds.max),\n\t\t};\n\t});\n\treturn {properties: scenes};\n}\n\n/** List meshes. */\nfunction listMeshes (doc: Document): InspectPropertyReport<InspectMeshReport> {\n\tconst meshes: InspectMeshReport[] = doc.getRoot().listMeshes().map((mesh) => {\n\t\tconst instances = mesh.listParents()\n\t\t\t.filter((parent) => parent.propertyType !== 'Root')\n\t\t\t.length;\n\t\tlet glPrimitives = 0;\n\t\tlet verts = 0;\n\t\tconst semantics = new Set<string>();\n\t\tconst meshIndices = new Set<string>();\n\t\tconst meshAccessors: Set<Accessor> = new Set();\n\n\t\tmesh.listPrimitives().forEach((prim) => {\n\t\t\tfor (const semantic of prim.listSemantics()) {\n\t\t\t\tconst attr = prim.getAttribute(semantic)!;\n\t\t\t\tsemantics.add(semantic + ':' + arrayToType(attr.getArray()!));\n\t\t\t\tmeshAccessors.add(attr);\n\t\t\t}\n\t\t\tfor (const targ of prim.listTargets()) {\n\t\t\t\ttarg.listAttributes().forEach((attr) => meshAccessors.add(attr));\n\t\t\t}\n\t\t\tconst indices = prim.getIndices();\n\t\t\tif (indices) {\n\t\t\t\tmeshIndices.add(arrayToType(indices.getArray()!));\n\t\t\t\tmeshAccessors.add(indices);\n\t\t\t}\n\t\t\tverts += prim.listAttributes()[0].getCount();\n\t\t\tglPrimitives += getGLPrimitiveCount(prim);\n\t\t});\n\n\t\tlet size = 0;\n\t\tArray.from(meshAccessors).forEach((a) => (size += a.getArray()!.byteLength));\n\n\t\tconst modes = mesh.listPrimitives()\n\t\t\t.map((prim) => MeshPrimitiveModeLabels[prim.getMode()]);\n\n\t\treturn {\n\t\t\tname: mesh.getName(),\n\t\t\tmode: Array.from(new Set(modes)),\n\t\t\tprimitives: mesh.listPrimitives().length,\n\t\t\tglPrimitives: glPrimitives,\n\t\t\tvertices: verts,\n\t\t\tindices: Array.from(meshIndices).sort(),\n\t\t\tattributes: Array.from(semantics).sort(),\n\t\t\tinstances: instances,\n\t\t\tsize: size,\n\t\t};\n\t});\n\n\treturn {properties: meshes};\n}\n\n/** List materials. */\nfunction listMaterials (doc: Document): InspectPropertyReport<InspectMaterialReport> {\n\tconst materials: InspectMaterialReport[] = doc.getRoot().listMaterials().map((material) => {\n\t\tconst instances = material.listParents()\n\t\t\t.filter((parent) => parent.propertyType !== 'Root')\n\t\t\t.length;\n\n\t\t// Find all texture slots attached to this material or its extensions.\n\t\tconst extensions = new Set<ExtensionProperty>(material.listExtensions());\n\t\tconst slots = doc.getGraph().listEdges()\n\t\t\t.filter((ref) => {\n\t\t\t\tconst child = ref.getChild();\n\t\t\t\tconst parent = ref.getParent();\n\t\t\t\tif (child instanceof Texture && parent === material) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (child instanceof Texture\n\t\t\t\t\t\t&& parent instanceof ExtensionProperty\n\t\t\t\t\t\t&& extensions.has(parent)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t})\n\t\t\t.map((ref) => ref.getName());\n\n\t\treturn {\n\t\t\tname: material.getName(),\n\t\t\tinstances,\n\t\t\ttextures: slots,\n\t\t\talphaMode: material.getAlphaMode(),\n\t\t\tdoubleSided: material.getDoubleSided(),\n\t\t};\n\t});\n\n\treturn {properties: materials};\n}\n\n/** List textures. */\nfunction listTextures (doc: Document): InspectPropertyReport<InspectTextureReport> {\n\tconst textures: InspectTextureReport[] = doc.getRoot().listTextures().map((texture) => {\n\t\tconst instances = texture.listParents()\n\t\t\t.filter((parent) => parent.propertyType !== 'Root')\n\t\t\t.length;\n\n\t\tconst slots = doc.getGraph().listParentEdges(texture)\n\t\t\t.map((edge) => edge.getName())\n\t\t\t.filter((name) => name !== 'texture');\n\n\t\tconst resolution = ImageUtils.getSize(texture.getImage()!, texture.getMimeType());\n\n\t\treturn {\n\t\t\tname: texture.getName(),\n\t\t\turi: texture.getURI(),\n\t\t\tslots: Array.from(new Set(slots)),\n\t\t\tinstances,\n\t\t\tmimeType: texture.getMimeType(),\n\t\t\tresolution: resolution ? resolution.join('x') : '',\n\t\t\tsize: texture.getImage()!.byteLength,\n\t\t\tgpuSize: ImageUtils.getMemSize(texture.getImage()!, texture.getMimeType()),\n\t\t};\n\t});\n\n\treturn {properties: textures};\n}\n\n/** List animations. */\nfunction listAnimations (doc: Document): InspectPropertyReport<InspectAnimationReport> {\n\tconst animations: InspectAnimationReport[] = doc.getRoot().listAnimations().map((anim) => {\n\t\tlet minTime = Infinity;\n\t\tlet maxTime = -Infinity;\n\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\tconst input = sampler.getInput();\n\t\t\tif (!input) return;\n\t\t\tminTime = Math.min(minTime, input.getMin([])[0]);\n\t\t\tmaxTime = Math.max(maxTime, input.getMax([])[0]);\n\t\t});\n\n\t\tlet size = 0;\n\t\tlet keyframes = 0;\n\t\tconst accessors: Set<Accessor> = new Set();\n\t\tanim.listSamplers().forEach((sampler) => {\n\t\t\tconst input = sampler.getInput();\n\t\t\tconst output = sampler.getOutput();\n\t\t\tif (!input) return;\n\t\t\tkeyframes += input.getCount();\n\t\t\taccessors.add(input);\n\t\t\tif (!output) return;\n\t\t\taccessors.add(output);\n\t\t});\n\t\tArray.from(accessors).forEach((accessor) => {\n\t\t\tsize += accessor.getArray()!.byteLength;\n\t\t});\n\n\t\treturn {\n\t\t\tname: anim.getName(),\n\t\t\tchannels: anim.listChannels().length,\n\t\t\tsamplers: anim.listSamplers().length,\n\t\t\tduration: Math.round((maxTime - minTime) * 1000) / 1000,\n\t\t\tkeyframes: keyframes,\n\t\t\tsize: size,\n\t\t};\n\t});\n\n\treturn {properties: animations};\n}\n\nexport interface InspectReport {\n\tscenes: InspectPropertyReport<InspectSceneReport>;\n\tmeshes: InspectPropertyReport<InspectMeshReport>;\n\tmaterials: InspectPropertyReport<InspectMaterialReport>;\n\ttextures: InspectPropertyReport<InspectTextureReport>;\n\tanimations: InspectPropertyReport<InspectAnimationReport>;\n}\n\nexport interface InspectPropertyReport<T> {\n\tproperties: T[];\n\terrors?: string[];\n\twarnings?: string[];\n}\n\nexport interface InspectSceneReport {\n\tname: string;\n\trootName: string;\n\tbboxMin: number[];\n\tbboxMax: number[];\n}\n\nexport interface InspectMeshReport {\n\tname: string;\n\tprimitives: number;\n\tmode: string[];\n\tvertices: number;\n\tglPrimitives: number;\n\tindices: string[];\n\tattributes: string[];\n\tinstances: number;\n\tsize: number;\n}\n\nexport interface InspectMaterialReport {\n\tname: string;\n\tinstances: number;\n\ttextures: string[];\n\talphaMode: GLTF.MaterialAlphaMode;\n\tdoubleSided: boolean;\n}\n\nexport interface InspectTextureReport {\n\tname: string;\n\turi: string;\n\tslots: string[];\n\tinstances: number;\n\tmimeType: string;\n\tresolution: string;\n\tsize: number;\n\tgpuSize: number | null;\n}\n\nexport interface InspectAnimationReport {\n\tname: string;\n\tchannels: number;\n\tsamplers: number;\n\tkeyframes: number;\n\tduration: number;\n\tsize: number;\n}\n\nconst MeshPrimitiveModeLabels = [\n\t'POINTS',\n\t'LINES',\n\t'LINE_LOOP',\n\t'LINE_STRIP',\n\t'TRIANGLES',\n\t'TRIANGLE_STRIP',\n\t'TRIANGLE_FAN',\n];\n\n/** Maps values in a vector to a finite precision. */\nfunction toPrecision(v: number[]): number[] {\n\tfor (let i = 0; i < v.length; i++) {\n\t\tif ((v[i] as number).toFixed) v[i] = Number(v[i].toFixed(5));\n\t}\n\treturn v;\n}\n\nfunction arrayToType(array: TypedArray): string {\n\treturn array.constructor.name.replace('Array', '').toLowerCase();\n}\n","import { Document, Logger, MathUtils, Mesh, Node, Transform, vec3, vec4 } from '@gltf-transform/core';\nimport { InstancedMesh, MeshGPUInstancing } from '@gltf-transform/extensions';\nimport { createTransform } from './utils';\n\nconst NAME = 'instance';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface InstanceOptions {}\n\nconst INSTANCE_DEFAULTS: Required<InstanceOptions> = {};\n\n/**\n * Creates GPU instances (with `EXT_mesh_gpu_instancing`) for shared {@link Mesh} references. No\n * options are currently implemented for this function.\n */\nexport function instance (_options: InstanceOptions = INSTANCE_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = {...INSTANCE_DEFAULTS, ..._options} as Required<InstanceOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst batchExtension = doc.createExtension(MeshGPUInstancing);\n\n\t\tif (root.listAnimations().length) {\n\t\t\tthrow new Error(`${NAME}: Instancing is not currently supported for animated models.`);\n\t\t}\n\n\t\tlet numBatches = 0;\n\t\tlet numInstances = 0;\n\n\t\tfor (const scene of root.listScenes()) {\n\t\t\t// Gather a one-to-many Mesh/Node mapping, identifying what we can instance.\n\t\t\tconst meshInstances = new Map<Mesh, Set<Node>>();\n\t\t\tscene.traverse((node) => {\n\t\t\t\tconst mesh = node.getMesh();\n\t\t\t\tif (!mesh) return;\n\t\t\t\tmeshInstances.set(mesh, (meshInstances.get(mesh) || new Set<Node>()).add(node));\n\t\t\t});\n\n\t\t\t// For each Mesh, create an InstancedMesh and collect transforms.\n\t\t\tconst modifiedNodes = [];\n\t\t\tfor (const mesh of Array.from(meshInstances.keys())) {\n\t\t\t\tconst nodes = Array.from(meshInstances.get(mesh)!);\n\t\t\t\tif (nodes.length < 2) continue;\n\t\t\t\tif (nodes.some((node) => node.getSkin())) continue;\n\n\t\t\t\tconst batch = createBatch(doc, batchExtension, mesh, nodes.length);\n\t\t\t\tconst batchTranslation = batch.getAttribute('TRANSLATION')!;\n\t\t\t\tconst batchRotation = batch.getAttribute('ROTATION')!;\n\t\t\t\tconst batchScale = batch.getAttribute('SCALE')!;\n\n\t\t\t\tconst batchNode = doc.createNode()\n\t\t\t\t\t.setMesh(mesh)\n\t\t\t\t\t.setExtension('EXT_mesh_gpu_instancing', batch);\n\t\t\t\tscene.addChild(batchNode);\n\n\t\t\t\tlet needsTranslation = false;\n\t\t\t\tlet needsRotation = false;\n\t\t\t\tlet needsScale = false;\n\n\t\t\t\t// For each Node, write TRS properties into instance attributes.\n\t\t\t\tfor (let i = 0; i < nodes.length; i++) {\n\t\t\t\t\tlet t: vec3, r: vec4, s: vec3;\n\t\t\t\t\tconst node = nodes[i];\n\n\t\t\t\t\tbatchTranslation.setElement(i, t = node.getWorldTranslation());\n\t\t\t\t\tbatchRotation.setElement(i, r = node.getWorldRotation());\n\t\t\t\t\tbatchScale.setElement(i, s = node.getWorldScale());\n\n\t\t\t\t\tif (!MathUtils.eq(t, [0, 0, 0])) needsTranslation = true;\n\t\t\t\t\tif (!MathUtils.eq(r, [0, 0, 0, 1])) needsRotation = true;\n\t\t\t\t\tif (!MathUtils.eq(s, [1, 1, 1])) needsScale = true;\n\n\t\t\t\t\t// Mark the node for cleanup.\n\t\t\t\t\tnode.setMesh(null);\n\t\t\t\t\tmodifiedNodes.push(node);\n\t\t\t\t}\n\n\t\t\t\tif (!needsTranslation) batchTranslation.dispose();\n\t\t\t\tif (!needsRotation) batchRotation.dispose();\n\t\t\t\tif (!needsScale) batchScale.dispose();\n\n\t\t\t\tpruneUnusedNodes(modifiedNodes, logger);\n\n\t\t\t\tnumBatches++;\n\t\t\t\tnumInstances += nodes.length;\n\t\t\t}\n\t\t}\n\n\t\tif (numBatches > 0) {\n\t\t\tlogger.info(\n\t\t\t\t`${NAME}: Created ${numBatches} batches, with ${numInstances} total instances.`\n\t\t\t);\n\t\t} else {\n\t\t\tlogger.info(`${NAME}: No meshes with multiple parent nodes were found.`);\n\t\t\tbatchExtension.dispose();\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n\n}\n\nfunction pruneUnusedNodes(nodes: Node[], logger: Logger): void {\n\tlet node: Node | undefined;\n\tlet unusedNodes = 0;\n\twhile ((node = nodes.pop())) {\n\t\tif (node.listChildren().length\n\t\t\t\t|| node.getCamera()\n\t\t\t\t|| node.getMesh()\n\t\t\t\t|| node.getSkin()\n\t\t\t\t|| node.listExtensions().length) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst nodeParent = node.getParent();\n\t\tif (nodeParent instanceof Node) {\n\t\t\tnodes.push(nodeParent);\n\t\t}\n\t\tnode.dispose();\n\t\tunusedNodes++;\n\t}\n\n\tlogger.debug(`${NAME}: Removed ${unusedNodes} unused nodes.`);\n}\n\nfunction createBatch(\n\t\tdoc: Document,\n\t\tbatchExtension: MeshGPUInstancing,\n\t\tmesh: Mesh,\n\t\tcount: number): InstancedMesh {\n\tconst buffer = mesh.listPrimitives()[0].getAttribute('POSITION')!.getBuffer();\n\n\tconst batchTranslation = doc.createAccessor()\n\t\t.setType('VEC3')\n\t\t.setArray(new Float32Array(3 * count))\n\t\t.setBuffer(buffer);\n\tconst batchRotation = doc.createAccessor()\n\t\t.setType('VEC4')\n\t\t.setArray(new Float32Array(4 * count))\n\t\t.setBuffer(buffer);\n\tconst batchScale = doc.createAccessor()\n\t\t.setType('VEC3')\n\t\t.setArray(new Float32Array(3 * count))\n\t\t.setBuffer(buffer);\n\n\treturn batchExtension.createInstancedMesh()\n\t\t.setAttribute('TRANSLATION', batchTranslation)\n\t\t.setAttribute('ROTATION', batchRotation)\n\t\t.setAttribute('SCALE', batchScale);\n}\n","import { Document, Texture, Transform } from '@gltf-transform/core';\nimport { MaterialsIOR, MaterialsPBRSpecularGlossiness, MaterialsSpecular, PBRSpecularGlossiness } from '@gltf-transform/extensions';\nimport { createTransform, rewriteTexture } from './utils';\n\nconst NAME = 'metalRough';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface MetalRoughOptions {}\n\nconst METALROUGH_DEFAULTS: Required<MetalRoughOptions> = {};\n\n/**\n * Convert {@link Material}s from spec/gloss PBR workflow to metal/rough PBR workflow,\n * removing `KHR_materials_pbrSpecularGlossiness` and adding `KHR_materials_ior` and\n * `KHR_materials_specular`. The metal/rough PBR workflow is preferred for most use cases,\n * and is a prerequisite for other advanced PBR extensions provided by glTF.\n *\n * No options are currently implemented for this function.\n */\nexport function metalRough (_options: MetalRoughOptions = METALROUGH_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = {...METALROUGH_DEFAULTS, ..._options} as Required<MetalRoughOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\n\t\tconst logger = doc.getLogger();\n\n\t\tconst extensionsUsed = doc.getRoot().listExtensionsUsed().map((ext) => ext.extensionName);\n\t\tif (!extensionsUsed.includes('KHR_materials_pbrSpecularGlossiness')) {\n\t\t\tlogger.warn(`${NAME}: KHR_materials_pbrSpecularGlossiness not found on document.`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst iorExtension = doc.createExtension(MaterialsIOR);\n\t\tconst specExtension = doc.createExtension(MaterialsSpecular);\n\t\tconst specGlossExtension = doc.createExtension(MaterialsPBRSpecularGlossiness);\n\n\t\tconst inputTextures = new Set<Texture | null>();\n\n\t\tfor (const material of doc.getRoot().listMaterials()) {\n\t\t\tconst specGloss = material\n\t\t\t\t.getExtension<PBRSpecularGlossiness>('KHR_materials_pbrSpecularGlossiness');\n\t\t\tif (!specGloss) continue;\n\n\t\t\t// Create specular extension.\n\t\t\tconst specular = specExtension.createSpecular()\n\t\t\t\t.setSpecularFactor(1.0)\n\t\t\t\t.setSpecularColorFactor(specGloss.getSpecularFactor());\n\n\t\t\t// Stash textures that might become unused, to check and clean up later.\n\t\t\tinputTextures.add(specGloss.getSpecularGlossinessTexture());\n\t\t\tinputTextures.add(material.getBaseColorTexture());\n\t\t\tinputTextures.add(material.getMetallicRoughnessTexture());\n\n\t\t\t// Set up a metal/rough PBR material with IOR=Infinity (or 0), metallic=0. This\n\t\t\t// representation is precise and reliable, but perhaps less convenient for artists\n\t\t\t// than deriving a metalness value. Unfortunately we can't do that without imprecise\n\t\t\t// heuristics, and perhaps user tuning.\n\t\t\t// See: https://github.com/KhronosGroup/glTF/pull/1719#issuecomment-674365677\n\t\t\tmaterial\n\t\t\t\t.setBaseColorFactor(specGloss.getDiffuseFactor())\n\t\t\t\t.setMetallicFactor(0)\n\t\t\t\t.setRoughnessFactor(1)\n\t\t\t\t.setExtension('KHR_materials_ior', iorExtension.createIOR().setIOR(1000))\n\t\t\t\t.setExtension('KHR_materials_specular', specular);\n\n\t\t\t// Move diffuse -> baseColor.\n\t\t\tconst diffuseTexture = specGloss.getDiffuseTexture();\n\t\t\tif (diffuseTexture) {\n\t\t\t\tmaterial.setBaseColorTexture(diffuseTexture);\n\t\t\t\tmaterial.getBaseColorTextureInfo()!.copy(specGloss.getDiffuseTextureInfo()!);\n\t\t\t}\n\n\t\t\t// Move specular + gloss -> specular + roughness.\n\t\t\tconst sgTexture = specGloss.getSpecularGlossinessTexture();\n\t\t\tif (sgTexture) {\n\t\t\t\t// specularGlossiness -> specular.\n\t\t\t\tconst sgTextureInfo = specGloss.getSpecularGlossinessTextureInfo()!;\n\t\t\t\tconst specularTexture = doc.createTexture();\n\t\t\t\tawait rewriteTexture(sgTexture, specularTexture, (pixels, i, j) => {\n\t\t\t\t\tpixels.set(i, j, 3, 255); // Remove glossiness.\n\t\t\t\t});\n\t\t\t\tspecular.setSpecularTexture(specularTexture);\n\t\t\t\tspecular.setSpecularColorTexture(specularTexture);\n\t\t\t\tspecular.getSpecularTextureInfo()!.copy(sgTextureInfo);\n\t\t\t\tspecular.getSpecularColorTextureInfo()!.copy(sgTextureInfo);\n\n\t\t\t\t// specularGlossiness -> roughness.\n\t\t\t\tconst glossinessFactor = specGloss.getGlossinessFactor();\n\t\t\t\tconst metalRoughTexture = doc.createTexture();\n\t\t\t\tawait rewriteTexture(sgTexture, metalRoughTexture, (pixels, i, j) => {\n\t\t\t\t\t// Invert glossiness.\n\t\t\t\t\tconst roughness = 255 - Math.round(pixels.get(i, j, 3) * glossinessFactor);\n\t\t\t\t\tpixels.set(i, j, 0, 0);\n\t\t\t\t\tpixels.set(i, j, 1, roughness);\n\t\t\t\t\tpixels.set(i, j, 2, 0);\n\t\t\t\t\tpixels.set(i, j, 3, 255);\n\t\t\t\t});\n\t\t\t\tmaterial.setMetallicRoughnessTexture(metalRoughTexture);\n\t\t\t\tmaterial.getMetallicRoughnessTextureInfo()!.copy(sgTextureInfo);\n\t\t\t} else {\n\t\t\t\tspecular.setSpecularColorFactor(specGloss.getSpecularFactor());\n\t\t\t\tmaterial.setRoughnessFactor(1 - specGloss.getGlossinessFactor());\n\t\t\t}\n\n\t\t\t// Remove KHR_materials_pbrSpecularGlossiness from the material.\n\t\t\tmaterial.setExtension('KHR_materials_pbrSpecularGlossiness', null);\n\t\t}\n\n\t\t// Remove KHR_materials_pbrSpecularGlossiness from the document.\n\t\tspecGlossExtension.dispose();\n\n\t\t// Clean up unused textures.\n\t\tfor (const tex of inputTextures) {\n\t\t\tif (tex && tex.listParents().length === 1) tex.dispose();\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\n\t});\n\n}\n","import { AnimationChannel, Document, Graph, Property, PropertyType, Root, Transform } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'prune';\n\nexport interface PruneOptions {\n\t/** List of {@link PropertyType} identifiers to be de-duplicated.*/\n\tpropertyTypes?: string[];\n}\nconst PRUNE_DEFAULTS: Required<PruneOptions> = {\n\tpropertyTypes: [\n\t\tPropertyType.NODE,\n\t\tPropertyType.SKIN,\n\t\tPropertyType.MESH,\n\t\tPropertyType.CAMERA,\n\t\tPropertyType.PRIMITIVE,\n\t\tPropertyType.PRIMITIVE_TARGET,\n\t\tPropertyType.ANIMATION,\n\t\tPropertyType.MATERIAL,\n\t\tPropertyType.TEXTURE,\n\t\tPropertyType.ACCESSOR,\n\t\tPropertyType.BUFFER,\n\t]\n};\n\n/**\n * Removes properties from the file if they are not referenced by a {@link Scene}. Commonly helpful\n * for cleaning up after other operations, e.g. allowing a node to be detached and any unused\n * meshes, materials, or other resources to be removed automatically.\n *\n * Example:\n *\n * ```\n * document.getRoot().listMaterials(); // → [Material, Material]\n *\n * await document.transform(prune());\n *\n * document.getRoot().listMaterials(); // → [Material]\n * ```\n *\n * No options are currently implemented for this function.\n */\nexport const prune = function (_options: PruneOptions = PRUNE_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = {...PRUNE_DEFAULTS, ..._options} as Required<PruneOptions>;\n\tconst propertyTypes = options.propertyTypes;\n\n\treturn createTransform(NAME, (doc: Document): void =>  {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst graph = doc.getGraph();\n\n\t\tconst disposed: Record<string, number> = {};\n\n\t\t// Prune top-down, so that low-level properties like accessors can be removed if the\n\t\t// properties referencing them are removed.\n\n\t\tif (propertyTypes.includes(PropertyType.NODE)) root.listNodes().forEach(treeShake);\n\t\tif (propertyTypes.includes(PropertyType.SKIN)) root.listSkins().forEach(treeShake);\n\t\tif (propertyTypes.includes(PropertyType.MESH)) root.listMeshes().forEach(treeShake);\n\t\tif (propertyTypes.includes(PropertyType.CAMERA)) root.listCameras().forEach(treeShake);\n\n\t\tif (propertyTypes.includes(PropertyType.PRIMITIVE)) {\n\t\t\tindirectTreeShake(graph, PropertyType.PRIMITIVE);\n\t\t}\n\t\tif (propertyTypes.includes(PropertyType.PRIMITIVE_TARGET)) {\n\t\t\tindirectTreeShake(graph, PropertyType.PRIMITIVE_TARGET);\n\t\t}\n\n\t\t// Pruning animations is a bit more complicated:\n\t\t// (1) Remove channels without target nodes.\n\t\t// (2) Remove animations without channels.\n\t\t// (3) Remove samplers orphaned in the process.\n\t\tif (propertyTypes.includes(PropertyType.ANIMATION)) {\n\t\t\tfor (const anim of root.listAnimations()) {\n\t\t\t\tfor (const channel of anim.listChannels()) {\n\t\t\t\t\tif (!channel.getTargetNode()) {\n\t\t\t\t\t\tchannel.dispose();\n\t\t\t\t\t\tmarkDisposed(channel);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!anim.listChannels().length) {\n\t\t\t\t\tconst samplers = anim.listSamplers();\n\t\t\t\t\ttreeShake(anim);\n\t\t\t\t\tsamplers.forEach(treeShake);\n\t\t\t\t} else {\n\t\t\t\t\tanim.listSamplers().forEach(treeShake);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (propertyTypes.includes(PropertyType.MATERIAL)) root.listMaterials().forEach(treeShake);\n\t\tif (propertyTypes.includes(PropertyType.TEXTURE)) root.listTextures().forEach(treeShake);\n\t\tif (propertyTypes.includes(PropertyType.ACCESSOR)) root.listAccessors().forEach(treeShake);\n\t\tif (propertyTypes.includes(PropertyType.BUFFER)) root.listBuffers().forEach(treeShake);\n\n\t\t// TODO(bug): This process does not identify unused ExtensionProperty instances. That could\n\t\t// be a future enhancement, either tracking unlinked properties as if they were connected\n\t\t// to the Graph, or iterating over a property list provided by the Extension. Properties in\n\t\t// use by an Extension are correctly preserved, in the meantime.\n\n\t\tif (Object.keys(disposed).length) {\n\t\t\tconst str = Object.keys(disposed).map((t) => `${t} (${disposed[t]})`).join(', ');\n\t\t\tlogger.info(`${NAME}: Removed types... ${str}`);\n\t\t} else {\n\t\t\tlogger.info(`${NAME}: No unused properties found.`);\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\n\t\t//\n\n\t\t/** Disposes of the given property if it is unused. */\n\t\tfunction treeShake(prop: Property): void {\n\t\t\t// Consider a property unused if it has no references from another property, excluding\n\t\t\t// types Root and AnimationChannel.\n\t\t\tconst parents = prop.listParents()\n\t\t\t\t.filter((p) => !(p instanceof Root || p instanceof AnimationChannel));\n\t\t\tif (!parents.length) {\n\t\t\t\tprop.dispose();\n\t\t\t\tmarkDisposed(prop);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * For property types the Root does not maintain references to, we'll need to search the\n\t\t * graph. It's possible that objects may have been constructed without any outbound links,\n\t\t * but since they're not on the graph they don't need to be tree-shaken.\n\t\t */\n\t\tfunction indirectTreeShake(graph: Graph<Property>, propertyType: string): void {\n\t\t\tgraph.listEdges()\n\t\t\t\t.map((edge) => edge.getParent())\n\t\t\t\t.filter((parent) => parent.propertyType === propertyType)\n\t\t\t\t.forEach(treeShake);\n\t\t}\n\n\t\t/** Records properties disposed by type. */\n\t\tfunction markDisposed(prop: Property): void {\n\t\t\tdisposed[prop.propertyType] = disposed[prop.propertyType] || 0;\n\t\t\tdisposed[prop.propertyType]++;\n\t\t}\n\n\t});\n\n};\n","import { Document, Logger, PropertyType, Transform } from '@gltf-transform/core';\nimport { prune } from './prune';\nimport { createTransform } from './utils';\n\nconst NAME = 'partition';\n\nexport interface PartitionOptions {\n\tanimations?: boolean | Array<string>;\n\tmeshes?: boolean | Array<string>;\n}\n\nconst PARTITION_DEFAULTS: Required<PartitionOptions> =  {\n\tanimations: true,\n\tmeshes: true,\n};\n\n/**\n * Partitions the binary payload of a glTF file so separate mesh or animation data is in separate\n * `.bin` {@link Buffer}s. This technique may be useful for engines that support lazy-loading\n * specific binary resources as needed over the application lifecycle.\n *\n * Example:\n *\n * ```ts\n * document.getRoot().listBuffers(); // → [Buffer]\n *\n * await document.transform(partition({meshes: true}));\n *\n * document.getRoot().listBuffers(); // → [Buffer, Buffer, ...]\n * ```\n */\nconst partition = (_options: PartitionOptions = PARTITION_DEFAULTS): Transform => {\n\n\tconst options = {...PARTITION_DEFAULTS, ..._options} as Required<PartitionOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tif (options.meshes !== false) partitionMeshes(doc, logger, options);\n\t\tif (options.animations !== false) partitionAnimations(doc, logger, options);\n\n\t\tif (!options.meshes && !options.animations) {\n\t\t\tlogger.warn(`${NAME}: Select animations or meshes to create a partition.`);\n\t\t}\n\n\t\tawait doc.transform(prune({propertyTypes: [PropertyType.BUFFER]}));\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n\n};\n\nfunction partitionMeshes (doc: Document, logger: Logger, options: PartitionOptions): void {\n\tconst existingURIs = new Set<string>(doc.getRoot().listBuffers().map((b) => b.getURI()));\n\n\tdoc.getRoot().listMeshes()\n\t\t.forEach((mesh, meshIndex) => {\n\t\t\tif (Array.isArray(options.meshes) && !options.meshes.includes(mesh.getName())) {\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`${NAME}: Skipping mesh #${meshIndex} with name \"${mesh.getName()}\".`\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(`${NAME}: Creating buffer for mesh \"${mesh.getName()}\".`);\n\n\t\t\tconst buffer = doc.createBuffer(mesh.getName())\n\t\t\t\t.setURI(createBufferURI(mesh.getName() || 'mesh', existingURIs));\n\n\t\t\tmesh.listPrimitives()\n\t\t\t\t.forEach((primitive) => {\n\t\t\t\t\tconst indices = primitive.getIndices();\n\t\t\t\t\tif (indices) indices.setBuffer(buffer);\n\t\t\t\t\tprimitive.listAttributes()\n\t\t\t\t\t\t.forEach((attribute) => attribute.setBuffer(buffer));\n\t\t\t\t\tprimitive.listTargets()\n\t\t\t\t\t\t.forEach((primTarget) => {\n\t\t\t\t\t\t\tprimTarget.listAttributes()\n\t\t\t\t\t\t\t\t.forEach((attribute) => attribute.setBuffer(buffer));\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t});\n}\n\nfunction partitionAnimations (doc: Document, logger: Logger, options: PartitionOptions): void {\n\tconst existingURIs = new Set<string>(doc.getRoot().listBuffers().map((b) => b.getURI()));\n\n\tdoc.getRoot().listAnimations()\n\t\t.forEach((anim, animIndex) => {\n\t\t\tif (Array.isArray(options.animations) && !options.animations.includes(anim.getName())) {\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`${NAME}: Skipping animation #${animIndex} with name \"${anim.getName()}\".`\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(`${NAME}: Creating buffer for animation \"${anim.getName()}\".`);\n\n\t\t\tconst buffer = doc.createBuffer(anim.getName())\n\t\t\t\t.setURI(createBufferURI(anim.getName() || 'animation', existingURIs));\n\n\t\t\tanim.listSamplers()\n\t\t\t\t.forEach((sampler) => {\n\t\t\t\t\tconst input = sampler.getInput();\n\t\t\t\t\tconst output = sampler.getOutput();\n\t\t\t\t\tif (input) input.setBuffer(buffer);\n\t\t\t\t\tif (output) output.setBuffer(buffer);\n\t\t\t\t});\n\t\t});\n}\n\nfunction createBufferURI (basename: string, existing: Set<string>): string {\n\tlet uri = `${basename}.bin`;\n\tlet i = 1;\n\twhile (existing.has(uri)) uri = `${basename}_${i++}.bin`;\n\treturn uri;\n}\n\nexport { partition };\n","import {\n\tAccessor,\n\tAnimationChannel,\n\tbbox,\n\tDocument,\n\tLogger,\n\tmat4,\n\tMesh,\n\tNode,\n\tPrimitive,\n\tPrimitiveTarget,\n\tPropertyType,\n\tSkin,\n\tTransform,\n\tvec2,\n\tvec3,\n\tvec4,\n} from '@gltf-transform/core';\nimport { dedup } from './dedup';\nimport { fromRotationTranslationScale, fromScaling, invert, multiply as multiplyMat4 } from 'gl-matrix/mat4';\nimport { max, min, scale, transformMat4 } from 'gl-matrix/vec3';\nimport { MeshQuantization } from '@gltf-transform/extensions';\nimport { prune } from './prune';\nimport { createTransform } from './utils';\n\nconst NAME = 'quantize';\n\ntype TypedArrayConstructor =\n\t| Int8ArrayConstructor\n\t| Int16ArrayConstructor\n\t| Uint8ArrayConstructor\n\t| Uint16ArrayConstructor;\nconst SIGNED_INT = [Int8Array, Int16Array, Int32Array] as TypedArrayConstructor[];\n\nconst { TRANSLATION, ROTATION, SCALE, WEIGHTS } = AnimationChannel.TargetPath;\nconst TRS_CHANNELS = [TRANSLATION, ROTATION, SCALE];\n\n/** Options for the {@link quantize} function. */\nexport interface QuantizeOptions {\n\t/** Pattern (regex) used to filter vertex attribute semantics for quantization. Default: all. */\n\tpattern?: RegExp;\n\t/** Bounds for quantization grid. */\n\tquantizationVolume?: 'mesh' | 'scene';\n\t/** Quantization bits for `POSITION` attributes. */\n\tquantizePosition?: number;\n\t/** Quantization bits for `NORMAL` attributes. */\n\tquantizeNormal?: number;\n\t/** Quantization bits for `TEXCOORD_*` attributes. */\n\tquantizeTexcoord?: number;\n\t/** Quantization bits for `COLOR_*` attributes. */\n\tquantizeColor?: number;\n\t/** Quantization bits for `WEIGHT_*` attributes. */\n\tquantizeWeight?: number;\n\t/** Quantization bits for application-specific (`_*`) attributes. */\n\tquantizeGeneric?: number;\n}\n\nexport const QUANTIZE_DEFAULTS: Required<QuantizeOptions> = {\n\tpattern: /.*/,\n\tquantizationVolume: 'mesh',\n\tquantizePosition: 14,\n\tquantizeNormal: 10,\n\tquantizeTexcoord: 12,\n\tquantizeColor: 8,\n\tquantizeWeight: 8,\n\tquantizeGeneric: 12,\n};\n\n/**\n * References:\n * - https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization\n * - http://www.aclockworkberry.com/normal-unpacking-quantization-errors/\n * - https://www.mathworks.com/help/dsp/ref/uniformencoder.html\n * - https://oroboro.com/compressed-unit-vectors/\n */\n\n/**\n * Quantizes vertex attributes with `KHR_mesh_quantization`, reducing the size and memory footprint\n * of the file.\n */\nconst quantize = (_options: QuantizeOptions = QUANTIZE_DEFAULTS): Transform => {\n\tconst options = { ...QUANTIZE_DEFAULTS, ..._options } as Required<QuantizeOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\n\t\tdoc.createExtension(MeshQuantization).setRequired(true);\n\n\t\t// Compute vertex position quantization volume.\n\t\tlet nodeTransform: VectorTransform<vec3> | undefined = undefined;\n\t\tif (options.quantizationVolume === 'scene') {\n\t\t\tnodeTransform = getNodeTransform(expandBounds(root.listMeshes().map(getPositionQuantizationVolume)));\n\t\t}\n\n\t\t// Quantize mesh primitives.\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tif (options.quantizationVolume === 'mesh') {\n\t\t\t\tnodeTransform = getNodeTransform(getPositionQuantizationVolume(mesh));\n\t\t\t}\n\n\t\t\tif (nodeTransform && options.pattern.test('POSITION')) {\n\t\t\t\ttransformMeshParents(doc, mesh, nodeTransform);\n\t\t\t}\n\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tquantizePrimitive(doc, prim, nodeTransform!, options);\n\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\tquantizePrimitive(doc, target, nodeTransform!, options);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tawait doc.transform(\n\t\t\tprune({ propertyTypes: [PropertyType.ACCESSOR, PropertyType.SKIN] }),\n\t\t\tdedup({ propertyTypes: [PropertyType.ACCESSOR] })\n\t\t);\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n};\n\nfunction quantizePrimitive(\n\tdoc: Document,\n\tprim: Primitive | PrimitiveTarget,\n\tnodeTransform: VectorTransform<vec3>,\n\toptions: Required<QuantizeOptions>\n): void {\n\tconst logger = doc.getLogger();\n\n\tfor (const semantic of prim.listSemantics()) {\n\t\tif (!options.pattern.test(semantic)) continue;\n\n\t\tconst srcAttribute = prim.getAttribute(semantic)!;\n\t\tconst { bits, ctor } = getQuantizationSettings(semantic, srcAttribute, logger, options);\n\n\t\tif (!ctor) continue;\n\t\tif (bits < 8 || bits > 16) throw new Error(`${NAME}: Requires bits = 8–16.`);\n\t\tif (srcAttribute.getComponentSize() <= bits / 8) continue;\n\n\t\tconst dstAttribute = srcAttribute.clone();\n\n\t\t// Remap position data.\n\t\tif (semantic === 'POSITION') {\n\t\t\tconst scale = nodeTransform.scale;\n\t\t\tconst transform: mat4 = [] as unknown as mat4;\n\t\t\t// Morph targets are relative offsets, don't translate them.\n\t\t\tprim instanceof Primitive\n\t\t\t\t? invert(transform, fromTransform(nodeTransform))\n\t\t\t\t: fromScaling(transform, [1 / scale, 1 / scale, 1 / scale]);\n\t\t\tfor (let i = 0, el: vec3 = [0, 0, 0], il = dstAttribute.getCount(); i < il; i++) {\n\t\t\t\tdstAttribute.getElement(i, el);\n\t\t\t\tdstAttribute.setElement(i, transformMat4(el, el, transform) as vec3);\n\t\t\t}\n\t\t}\n\n\t\t// Quantize the vertex attribute.\n\t\tquantizeAttribute(dstAttribute, ctor, bits);\n\t\tprim.swap(srcAttribute, dstAttribute);\n\t}\n\n\t// Normalize skinning weights.\n\tif (prim.getAttribute('WEIGHTS_0')) {\n\t\tnormalizeWeights(prim);\n\t}\n\n\tif (\n\t\tprim instanceof Primitive &&\n\t\tprim.getIndices() &&\n\t\tprim.listAttributes().length &&\n\t\tprim.listAttributes()[0]!.getCount() < 65535\n\t) {\n\t\tconst indices = prim.getIndices()!;\n\t\tindices.setArray(new Uint16Array(indices.getArray()!));\n\t}\n}\n\n/** Computes node quantization transforms in local space. */\nfunction getNodeTransform(volume: bbox): VectorTransform<vec3> {\n\tconst { min, max } = volume;\n\n\t// Scaling factor transforms [-1,1] box to the mesh AABB in local space.\n\t// See: https://github.com/donmccurdy/glTF-Transform/issues/328\n\tconst scale = Math.max(\n\t\t(max[0] - min[0]) / 2, // Divide because interval [-1,1] has length 2.\n\t\t(max[1] - min[1]) / 2,\n\t\t(max[2] - min[2]) / 2\n\t);\n\n\t// Original center of the mesh, in local space.\n\tconst offset: vec3 = [\n\t\tmin[0] + (max[0] - min[0]) / 2,\n\t\tmin[1] + (max[1] - min[1]) / 2,\n\t\tmin[2] + (max[2] - min[2]) / 2,\n\t];\n\n\treturn { offset, scale };\n}\n\n/** Applies corrective scale and offset to nodes referencing a quantized Mesh. */\nfunction transformMeshParents(doc: Document, mesh: Mesh, nodeTransform: VectorTransform<vec3>): void {\n\tconst transformMatrix = fromTransform(nodeTransform);\n\tfor (const parent of mesh.listParents()) {\n\t\tif (parent instanceof Node) {\n\t\t\tconst animChannels = parent\n\t\t\t\t.listParents()\n\t\t\t\t.filter((p) => p instanceof AnimationChannel) as AnimationChannel[];\n\t\t\tconst isAnimated = animChannels.some((channel) => TRS_CHANNELS.includes(channel.getTargetPath()!));\n\t\t\tconst isParentNode = parent.listChildren().length > 0;\n\n\t\t\tif (parent.getSkin()) {\n\t\t\t\tparent.setSkin(transformSkin(parent.getSkin()!, nodeTransform));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet targetNode: Node;\n\t\t\tif (isParentNode || isAnimated) {\n\t\t\t\ttargetNode = doc.createNode('').setMesh(mesh);\n\t\t\t\tparent.addChild(targetNode).setMesh(null);\n\t\t\t\tanimChannels\n\t\t\t\t\t.filter((channel) => channel.getTargetPath() === WEIGHTS)\n\t\t\t\t\t.forEach((channel) => channel.setTargetNode(targetNode));\n\t\t\t} else {\n\t\t\t\ttargetNode = parent;\n\t\t\t}\n\n\t\t\tconst nodeMatrix = targetNode.getMatrix();\n\t\t\tmultiplyMat4(nodeMatrix, nodeMatrix, transformMatrix);\n\t\t\ttargetNode.setMatrix(nodeMatrix);\n\t\t}\n\t}\n}\n\n/** Applies corrective scale and offset to skin IBMs. */\nfunction transformSkin(skin: Skin, nodeTransform: VectorTransform<vec3>): Skin {\n\tskin = skin.clone();\n\tconst transformMatrix = fromTransform(nodeTransform);\n\tconst inverseBindMatrices = skin.getInverseBindMatrices()!.clone();\n\tconst ibm = [] as unknown as mat4;\n\tfor (let i = 0, count = inverseBindMatrices.getCount(); i < count; i++) {\n\t\tinverseBindMatrices.getElement(i, ibm);\n\t\tmultiplyMat4(ibm, ibm, transformMatrix);\n\t\tinverseBindMatrices.setElement(i, ibm);\n\t}\n\treturn skin.setInverseBindMatrices(inverseBindMatrices);\n}\n\n/**\n * Quantizes an attribute to the given parameters.\n *\n * Uniformly remap 32-bit floats to reduced-precision 8- or 16-bit integers, so\n * that there are only 2^N unique values, for N within [8, 16].\n *\n * See: https://github.com/donmccurdy/glTF-Transform/issues/208\n */\nfunction quantizeAttribute(attribute: Accessor, ctor: TypedArrayConstructor, bits: number): void {\n\tconst dstArray = new ctor(attribute.getArray()!.length);\n\n\tconst signBits = SIGNED_INT.includes(ctor) ? 1 : 0;\n\tconst quantBits = bits - signBits;\n\tconst storageBits = ctor.BYTES_PER_ELEMENT * 8 - signBits;\n\n\tconst scale = Math.pow(2, quantBits) - 1;\n\tconst lo = storageBits - quantBits;\n\tconst hi = 2 * quantBits - storageBits;\n\n\tfor (let i = 0, di = 0, el: number[] = []; i < attribute.getCount(); i++) {\n\t\tattribute.getElement(i, el);\n\t\tfor (let j = 0; j < el.length; j++) {\n\t\t\t// Map [0.0 ... 1.0] to [0 ... scale].\n\t\t\tlet value = Math.round(Math.abs(el[j]) * scale);\n\n\t\t\t// Replicate msb to missing lsb.\n\t\t\tvalue = (value << lo) | (value >> hi);\n\n\t\t\t// Restore sign.\n\t\t\tdstArray[di++] = value * Math.sign(el[j]);\n\t\t}\n\t}\n\n\tattribute.setArray(dstArray).setNormalized(true);\n}\n\nfunction getQuantizationSettings(\n\tsemantic: string,\n\tattribute: Accessor,\n\tlogger: Logger,\n\toptions: Required<QuantizeOptions>\n): { bits: number; ctor?: TypedArrayConstructor } {\n\tconst min = attribute.getMinNormalized([]);\n\tconst max = attribute.getMaxNormalized([]);\n\n\tlet bits: number;\n\tlet ctor: TypedArrayConstructor;\n\n\tif (semantic === 'POSITION') {\n\t\tbits = options.quantizePosition;\n\t\tctor = bits <= 8 ? Int8Array : Int16Array;\n\t} else if (semantic === 'NORMAL' || semantic === 'TANGENT') {\n\t\tbits = options.quantizeNormal;\n\t\tctor = bits <= 8 ? Int8Array : Int16Array;\n\t} else if (semantic.startsWith('COLOR_')) {\n\t\tbits = options.quantizeColor;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('TEXCOORD_')) {\n\t\tif (min.some((v) => v < 0) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [0,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeTexcoord;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('JOINTS_')) {\n\t\tbits = Math.max(...attribute.getMax([])) <= 255 ? 8 : 16;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t\tif (attribute.getComponentSize() > bits / 8) {\n\t\t\tattribute.setArray(new ctor(attribute.getArray()!));\n\t\t}\n\t\treturn { bits: -1 };\n\t} else if (semantic.startsWith('WEIGHTS_')) {\n\t\tif (min.some((v) => v < 0) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [0,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeWeight;\n\t\tctor = bits <= 8 ? Uint8Array : Uint16Array;\n\t} else if (semantic.startsWith('_')) {\n\t\tif (min.some((v) => v < -1) || max.some((v) => v > 1)) {\n\t\t\tlogger.warn(`${NAME}: Skipping ${semantic}; out of [-1,1] range.`);\n\t\t\treturn { bits: -1 };\n\t\t}\n\t\tbits = options.quantizeGeneric;\n\t\tctor = min.some((v) => v < 0)\n\t\t\t? (ctor = bits <= 8 ? Int8Array : Int16Array)\n\t\t\t: (ctor = bits <= 8 ? Uint8Array : Uint16Array);\n\t} else {\n\t\tthrow new Error(`${NAME}: Unexpected semantic, \"${semantic}\".`);\n\t}\n\n\treturn { bits, ctor };\n}\n\nfunction getPositionQuantizationVolume(mesh: Mesh): bbox {\n\tconst positions: Accessor[] = [];\n\tconst relativePositions: Accessor[] = [];\n\tfor (const prim of mesh.listPrimitives()) {\n\t\tconst attribute = prim.getAttribute('POSITION');\n\t\tif (attribute) positions.push(attribute);\n\t\tfor (const target of prim.listTargets()) {\n\t\t\tconst attribute = target.getAttribute('POSITION');\n\t\t\tif (attribute) relativePositions.push(attribute);\n\t\t}\n\t}\n\n\tif (positions.length === 0) {\n\t\tthrow new Error(`${NAME}: Missing \"POSITION\" attribute.`);\n\t}\n\n\tconst bbox = flatBounds<vec3>(positions, 3);\n\n\t// Morph target quantization volume is computed differently. First, ensure that the origin\n\t// <0, 0, 0> is in the quantization volume. Because we can't offset target positions (they're\n\t// relative deltas), default remapping will only map to a [-2, 2] AABB. Double the bounding box\n\t// to ensure scaling puts them within a [-1, 1] AABB instead.\n\tif (relativePositions.length > 0) {\n\t\tconst { min: relMin, max: relMax } = flatBounds<vec3>(relativePositions, 3);\n\t\tmin(bbox.min, bbox.min, min(relMin, scale(relMin, relMin, 2), [0, 0, 0]));\n\t\tmax(bbox.max, bbox.max, max(relMax, scale(relMax, relMax, 2), [0, 0, 0]));\n\t}\n\n\treturn bbox;\n}\n\n/** Computes total min and max of all Accessors in a list. */\nfunction flatBounds<T = vec2 | vec3>(accessors: Accessor[], elementSize: number): { min: T; max: T } {\n\tconst min: number[] = new Array(elementSize).fill(Infinity);\n\tconst max: number[] = new Array(elementSize).fill(-Infinity);\n\n\tconst tmpMin: number[] = [];\n\tconst tmpMax: number[] = [];\n\n\tfor (const accessor of accessors) {\n\t\taccessor.getMinNormalized(tmpMin);\n\t\taccessor.getMaxNormalized(tmpMax);\n\t\tfor (let i = 0; i < elementSize; i++) {\n\t\t\tmin[i] = Math.min(min[i], tmpMin[i]);\n\t\t\tmax[i] = Math.max(max[i], tmpMax[i]);\n\t\t}\n\t}\n\n\treturn { min, max } as unknown as { min: T; max: T };\n}\n\nfunction expandBounds(bboxes: bbox[]): bbox {\n\tconst result = bboxes[0];\n\tfor (const bbox of bboxes) {\n\t\tmin(result.min, result.min, bbox.min);\n\t\tmax(result.max, result.max, bbox.max);\n\t}\n\treturn result;\n}\n\ninterface VectorTransform<T = vec2 | vec3 | vec4> {\n\toffset: T;\n\tscale: number;\n}\n\nfunction fromTransform(transform: VectorTransform<vec3>): mat4 {\n\treturn fromRotationTranslationScale([] as unknown as mat4, [0, 0, 0, 1], transform.offset, [\n\t\ttransform.scale,\n\t\ttransform.scale,\n\t\ttransform.scale,\n\t]) as mat4;\n}\n\nfunction normalizeWeights(prim: Primitive | PrimitiveTarget): void {\n\tconst vertexCount = prim.getAttribute('POSITION')!.getCount();\n\tconst weightsEl: number[] = [];\n\n\tfor (let i = 0; i < vertexCount; i++) {\n\t\tlet vertexWeightsSum = 0;\n\n\t\tlet leastWeight = Infinity;\n\t\tlet leastIndex = -1;\n\t\tlet leastAttribute: Accessor | null = null;\n\n\t\tlet weights: Accessor | null;\n\t\tlet attributeIndex = 0;\n\n\t\t// Find sum of weights and the joint with the lowest non-zero weight.\n\t\twhile ((weights = prim.getAttribute(`WEIGHTS_${attributeIndex++}`))) {\n\t\t\tweights.getElement(i, weightsEl);\n\t\t\tfor (let j = 0; j < weightsEl.length; j++) {\n\t\t\t\tvertexWeightsSum += weightsEl[j];\n\t\t\t\tif (weightsEl[j] > 0 && weightsEl[j] < leastWeight) {\n\t\t\t\t\tleastAttribute = weights;\n\t\t\t\t\tleastWeight = weightsEl[j];\n\t\t\t\t\tleastIndex = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Normalize by updating least-significant joint weight.\n\t\tif (leastAttribute && vertexWeightsSum !== 1) {\n\t\t\tleastAttribute.getElement(i, weightsEl);\n\t\t\tweightsEl[leastIndex] += 1 - vertexWeightsSum;\n\t\t\tleastAttribute.setElement(i, weightsEl);\n\t\t}\n\t}\n}\n\nexport { quantize };\n","import { Accessor, AnimationSampler, Document, Root, Transform, TransformContext } from '@gltf-transform/core';\nimport { createTransform, isTransformPending } from './utils';\n\nconst NAME = 'resample';\n\nexport interface ResampleOptions {tolerance?: number}\n\nconst RESAMPLE_DEFAULTS: Required<ResampleOptions> =  {tolerance: 1e-4};\n\n/**\n * Resample {@link Animation}s, losslessly deduplicating keyframes to reduce file size. Duplicate\n * keyframes are commonly present in animation 'baked' by the authoring software to apply IK\n * constraints or other software-specific features. Based on THREE.KeyframeTrack.optimize().\n *\n * Example: (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n */\nexport const resample = (_options: ResampleOptions = RESAMPLE_DEFAULTS): Transform => {\n\n\tconst options = {...RESAMPLE_DEFAULTS, ..._options} as Required<ResampleOptions>;\n\n\treturn createTransform(NAME, (doc: Document, context?: TransformContext): void => {\n\t\tconst accessorsVisited = new Set<Accessor>();\n\t\tconst accessorsCountPrev = doc.getRoot().listAccessors().length;\n\t\tconst logger = doc.getLogger();\n\n\t\tlet didSkipMorphTargets = false;\n\n\t\tfor (const animation of doc.getRoot().listAnimations()) {\n\t\t\t// Skip morph targets, see https://github.com/donmccurdy/glTF-Transform/issues/290.\n\t\t\tconst morphTargetSamplers = new Set<AnimationSampler>();\n\t\t\tfor (const channel of animation.listChannels()) {\n\t\t\t\tif (channel.getSampler() && channel.getTargetPath() === 'weights') {\n\t\t\t\t\tmorphTargetSamplers.add(channel.getSampler()!);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const sampler of animation.listSamplers()) {\n\t\t\t\tif (morphTargetSamplers.has(sampler)) {\n\t\t\t\t\tdidSkipMorphTargets = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (sampler.getInterpolation() === 'STEP'\n\t\t\t\t\t|| sampler.getInterpolation() === 'LINEAR') {\n\t\t\t\t\taccessorsVisited.add(sampler.getInput()!);\n\t\t\t\t\taccessorsVisited.add(sampler.getOutput()!);\n\t\t\t\t\toptimize(sampler, options);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const accessor of Array.from(accessorsVisited.values())) {\n\t\t\tconst used = accessor.listParents().some((p) => !(p instanceof Root));\n\t\t\tif (!used) accessor.dispose();\n\t\t}\n\n\t\tif (doc.getRoot().listAccessors().length > accessorsCountPrev && !isTransformPending(context, NAME, 'dedup')) {\n\t\t\tlogger.warn(\n\t\t\t\t`${NAME}: Resampling required copying accessors, some of which may be duplicates.`\n\t\t\t\t+ ' Consider using \"dedup\" to consolidate any duplicates.'\n\t\t\t);\n\t\t}\n\n\t\tif (didSkipMorphTargets) {\n\t\t\tlogger.warn(`${NAME}: Skipped optimizing morph target keyframes, not yet supported.`);\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n\n};\n\nfunction optimize (sampler: AnimationSampler, options: ResampleOptions): void {\n\tconst input = sampler.getInput()!.clone();\n\tconst output = sampler.getOutput()!.clone();\n\n\tconst tolerance = options.tolerance as number;\n\n\tconst lastIndex = input.getCount() - 1;\n\tconst tmp: number[] = [];\n\n\tlet writeIndex = 1;\n\n\tfor (let i = 1; i < lastIndex; ++ i) {\n\t\tconst time = input.getScalar(i);\n\t\tconst timePrev = input.getScalar(i - 1);\n\t\tconst timeNext = input.getScalar(i + 1);\n\t\tconst timeMix = (time - timePrev) / (timeNext - timePrev);\n\n\t\tlet keep = false;\n\n\t\t// Remove unnecessary adjacent keyframes.\n\t\tif (time !== timeNext && (i !== 1 || time !== input.getScalar(0))) {\n\t\t\tfor (let j = 0; j < output.getElementSize(); j++) {\n\t\t\t\tconst value = output.getElement(i, tmp)[j];\n\t\t\t\tconst valuePrev = output.getElement(i - 1, tmp)[j];\n\t\t\t\tconst valueNext = output.getElement(i + 1, tmp)[j];\n\n\t\t\t\tif (sampler.getInterpolation() === 'LINEAR') {\n\t\t\t\t\t// Prune keyframes that are colinear with prev/next keyframes.\n\t\t\t\t\tif (Math.abs(value - lerp(valuePrev, valueNext, timeMix)) > tolerance) {\n\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (sampler.getInterpolation() === 'STEP') {\n\t\t\t\t\t// Prune keyframes that are identical to prev/next keyframes.\n\t\t\t\t\tif (value !== valuePrev || value !== valueNext) {\n\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// In-place compaction.\n\t\tif (keep) {\n\t\t\tif (i !== writeIndex) {\n\t\t\t\tinput.setScalar(writeIndex, input.getScalar(i));\n\t\t\t\toutput.setElement(writeIndex, output.getElement(i, tmp));\n\t\t\t}\n\t\t\twriteIndex++;\n\t\t}\n\n\t}\n\n\t// Flush last keyframe (compaction looks ahead).\n\tif (lastIndex > 0) {\n\t\tinput.setScalar(writeIndex, input.getScalar(lastIndex));\n\t\toutput.setElement(writeIndex, output.getElement(lastIndex, tmp));\n\t\twriteIndex++;\n\t}\n\n\t// If the sampler was optimized, truncate and save the results. If not, clean up.\n\tif (writeIndex !== input.getCount()) {\n\t\tinput.setArray(input.getArray()!.slice(0, writeIndex));\n\t\toutput.setArray(output.getArray()!.slice(0, writeIndex * output.getElementSize()));\n\t\tsampler.setInput(input);\n\t\tsampler.setOutput(output);\n\t} else {\n\t\tinput.dispose();\n\t\toutput.dispose();\n\t}\n}\n\nfunction lerp (v0: number, v1: number, t: number): number {\n    return v0 * (1 - t) + v1 * t;\n}\n","import { Accessor, Document, GLTF, Primitive, PropertyType, Transform } from '@gltf-transform/core';\nimport { prune } from './prune';\nimport { createTransform, SetMap } from './utils';\nimport type { MeshoptEncoder } from 'meshoptimizer';\n\nconst NAME = 'reorder';\n\n/** Options for the {@link reorder} function. */\nexport interface ReorderOptions {\n\t/** MeshoptEncoder instance. */\n\tencoder?: typeof MeshoptEncoder,\n\t/**\n\t * Whether the order should be optimal for transmission size (recommended for Web)\n\t * or for GPU rendering performance. Default is 'size'.\n\t */\n\ttarget?: 'size' | 'performance',\n}\n\nconst REORDER_DEFAULTS: Required<Omit<ReorderOptions, 'encoder'>> = {\n\ttarget: 'size',\n};\n\ninterface LayoutPlan {\n\tindicesToMode: Map<Accessor, GLTF.MeshPrimitiveMode>;\n\tindicesToAttributes: SetMap<Accessor, Accessor>;\n\tattributesToPrimitives: SetMap<Accessor, Primitive>;\n}\n\n/**\n * Optimizes {@link Mesh} {@link Primitive Primitives} for locality of reference. Choose whether\n * the order should be optimal for transmission size (recommended for Web) or for GPU rendering\n * performance. Requires a MeshoptEncoder instance from the Meshoptimizer library.\n *\n * Example:\n *\n * ```ts\n * import { MeshoptEncoder } from 'meshoptimizer';\n * import { reorder } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \treorder({encoder: MeshoptEncoder})\n * );\n * ```\n */\nexport function reorder (_options: ReorderOptions = REORDER_DEFAULTS): Transform {\n\tconst options = {...REORDER_DEFAULTS, ..._options} as Required<ReorderOptions>;\n\tconst encoder = options.encoder;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\t\tconst logger = doc.getLogger();\n\n\t\tawait encoder.ready;\n\n\t\tconst plan = preprocessPrimitives(doc);\n\n\t\tfor (const srcIndices of plan.indicesToAttributes.keys()) {\n\t\t\tconst dstIndices = srcIndices.clone();\n\t\t\tlet indicesArray = dstIndices.getArray()!.slice();\n\t\t\tif (!(indicesArray instanceof Uint32Array)) {\n\t\t\t\tindicesArray = new Uint32Array(indicesArray);\n\t\t\t}\n\n\t\t\t// Compute optimal order.\n\t\t\tconst [remap, unique] = encoder.reorderMesh(\n\t\t\t\tindicesArray,\n\t\t\t\tplan.indicesToMode.get(srcIndices) === Primitive.Mode.TRIANGLES,\n\t\t\t\toptions.target === 'size'\n\t\t\t);\n\n\t\t\tdstIndices.setArray(unique <= 65534 ? new Uint16Array(indicesArray) : indicesArray);\n\n\t\t\t// Update affected primitives.\n\t\t\tfor (const srcAttribute of plan.indicesToAttributes.get(srcIndices)) {\n\t\t\t\tconst dstAttribute = srcAttribute.clone();\n\t\t\t\tremapAttribute(dstAttribute, remap, unique);\n\t\t\t\tfor (const prim of plan.attributesToPrimitives.get(srcAttribute)) {\n\t\t\t\t\tif (prim.getIndices() === srcIndices) {\n\t\t\t\t\t\tprim.swap(srcIndices, dstIndices);\n\t\t\t\t\t}\n\t\t\t\t\tif (prim.getIndices() === dstIndices) {\n\t\t\t\t\t\tprim.swap(srcAttribute, dstAttribute);\n\t\t\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\t\t\ttarget.swap(srcAttribute, dstAttribute);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Clean up any attributes left unused by earlier cloning.\n\t\tawait doc.transform(prune({propertyTypes: [PropertyType.ACCESSOR]}));\n\n\t\tif (!plan.indicesToAttributes.size) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found; may need to weld first.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t});\n}\n\nfunction remapAttribute(attribute: Accessor, remap: Uint32Array, dstCount: number) {\n\tconst elementSize = attribute.getElementSize();\n\tconst srcCount = attribute.getCount();\n\tconst srcArray = attribute.getArray()!;\n\tconst dstArray = srcArray.slice(0, dstCount * elementSize);\n\n\tfor (let i = 0; i < srcCount; i++) {\n\t\tfor (let j = 0; j < elementSize; j++) {\n\t\t\tdstArray[remap[i] * elementSize + j] = srcArray[i * elementSize + j];\n\t\t}\n\t}\n\n\tattribute.setArray(dstArray);\n}\n\n/**\n * Constructs a plan for creating optimal vertex cache order, based on unique\n * index:attribute[] groups. Where different indices are used with the same\n * attributes, we'll end up splitting the primitives to not share attributes,\n * which appears to be consistent with the Meshopt implementation.\n */\nfunction preprocessPrimitives(doc: Document): LayoutPlan {\n\tconst indicesToAttributes = new SetMap<Accessor, Accessor>();\n\tconst indicesToMode = new Map<Accessor, GLTF.MeshPrimitiveMode>();\n\tconst attributesToPrimitives = new SetMap<Accessor, Primitive>();\n\n\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\tconst indices = prim.getIndices();\n\t\t\tif (!indices) continue;\n\n\t\t\tindicesToMode.set(indices, prim.getMode());\n\n\t\t\tfor (const attribute of listAttributes(prim)) {\n\t\t\t\tindicesToAttributes.add(indices, attribute);\n\t\t\t\tattributesToPrimitives.add(attribute, prim);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {indicesToAttributes, indicesToMode, attributesToPrimitives};\n}\n\nfunction listAttributes(prim: Primitive): Accessor[] {\n\tconst accessors: Accessor[] = [];\n\n\tfor (const attribute of prim.listAttributes()) {\n\t\taccessors.push(attribute);\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const attribute of target.listAttributes()) {\n\t\t\taccessors.push(attribute);\n\t\t}\n\t}\n\n\treturn Array.from(new Set(accessors));\n}\n","import { Accessor, AnimationChannel, AnimationSampler, Document, Transform } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'sequence';\n\nexport interface SequenceOptions {\n\t/** Frames per second, where one node is shown each frame. Default 10. */\n\tfps?: number;\n\t/** Pattern (regex) used to filter nodes for the sequence. Required. */\n\tpattern: RegExp;\n\t/** Name of the new animation. */\n\tname?: string;\n\t/** Whether to sort the nodes by name, or use original order. Default true. */\n\tsort?: boolean;\n}\n\nconst SEQUENCE_DEFAULTS: Required<SequenceOptions> = {\n\tname: '',\n\tfps: 10,\n\tpattern: /.*/,\n\tsort: true,\n};\n\n/**\n * Creates an {@link Animation} displaying each of the specified {@link Node}s sequentially.\n */\nexport function sequence (_options: SequenceOptions = SEQUENCE_DEFAULTS): Transform {\n\tconst options = {...SEQUENCE_DEFAULTS, ..._options} as Required<SequenceOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\n\t\tconst logger = doc.getLogger();\n\t\tconst root = doc.getRoot();\n\t\tconst fps = options.fps;\n\n\t\t// Collect sequence nodes.\n\t\tconst sequenceNodes = root.listNodes()\n\t\t\t.filter((node) => node.getName().match(options.pattern));\n\n\t\t// Sort by node name.\n\t\tif (options.sort) {\n\t\t\tsequenceNodes.sort((a, b) => a.getName() > b.getName() ? 1 : -1);\n\t\t}\n\n\t\t// Create animation cycling visibility of each node.\n\t\tconst anim = doc.createAnimation(options.name);\n\t\tconst animBuffer = root.listBuffers()[0];\n\t\tsequenceNodes.forEach((node, i) => {\n\t\t\t// Create keyframe tracks that show each node for a single frame.\n\t\t\tlet inputArray;\n\t\t\tlet outputArray;\n\t\t\tif (i === 0) {\n\t\t\t\tinputArray = [i / fps, (i + 1) / fps];\n\t\t\t\toutputArray = [1, 1, 1, 0, 0, 0];\n\t\t\t} else if (i === sequenceNodes.length - 1) {\n\t\t\t\tinputArray = [(i - 1) / fps, i / fps];\n\t\t\t\toutputArray = [0, 0, 0, 1, 1, 1];\n\t\t\t} else {\n\t\t\t\tinputArray = [(i - 1) / fps, i / fps, (i + 1) / fps];\n\t\t\t\toutputArray = [0, 0, 0, 1, 1, 1, 0, 0, 0];\n\t\t\t}\n\n\t\t\t// Append channel to animation sequence.\n\t\t\tconst input = doc.createAccessor()\n\t\t\t\t.setArray(new Float32Array(inputArray))\n\t\t\t\t.setBuffer(animBuffer);\n\t\t\tconst output = doc.createAccessor()\n\t\t\t\t.setArray(new Float32Array(outputArray))\n\t\t\t\t.setBuffer(animBuffer)\n\t\t\t\t.setType(Accessor.Type.VEC3);\n\t\t\tconst sampler = doc.createAnimationSampler()\n\t\t\t\t.setInterpolation(AnimationSampler.Interpolation.STEP)\n\t\t\t\t.setInput(input)\n\t\t\t\t.setOutput(output);\n\t\t\tconst channel = doc.createAnimationChannel()\n\t\t\t\t.setTargetNode(node)\n\t\t\t\t.setTargetPath(AnimationChannel.TargetPath.SCALE)\n\t\t\t\t.setSampler(sampler);\n\t\t\tanim.addSampler(sampler).addChannel(channel);\n\t\t});\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\n\t});\n\n}\n","import { Accessor, Document, Logger, Primitive, Transform, TypedArray, uuid } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'tangents';\n\n/** Options for the {@link tangents} function. */\nexport interface TangentsOptions {\n\t/**\n\t * Callback function to generate tangents from position, uv, and normal attributes.\n\t * Generally, users will want to provide the `generateTangents` from the\n\t * [mikktspace](https://github.com/donmccurdy/mikktspace-wasm) library, which is not\n\t * included by default.\n\t */\n\tgenerateTangents?: (pos: Float32Array, norm: Float32Array, uv: Float32Array) => Float32Array,\n\t/** Whether to overwrite existing `TANGENT` attributes. */\n\toverwrite?: boolean,\n}\n\nconst TANGENTS_DEFAULTS: Required<Omit<TangentsOptions, 'generateTangents'>> = {\n\toverwrite: false,\n};\n\n/**\n * Generates MikkTSpace vertex tangents for mesh primitives, which may fix rendering issues\n * occuring with some baked normal maps. Requires access to the [mikktspace](https://github.com/donmccurdy/mikktspace-wasm)\n * WASM package, or equivalent.\n *\n * Example:\n *\n * ```ts\n * import { generateTangents } from 'mikktspace';\n * import { tangents } from '@gltf-transform/functions';\n *\n * await document.transform(\n * \ttangents({generateTangents})\n * );\n * ```\n */\nexport function tangents (_options: TangentsOptions = TANGENTS_DEFAULTS): Transform {\n\tif (!_options.generateTangents) {\n\t\tthrow new Error(`${NAME}: generateTangents callback required — install \"mikktspace\".`);\n\t}\n\n\tconst options = {...TANGENTS_DEFAULTS, ..._options} as Required<TangentsOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\t\tconst attributeIDs = new Map<TypedArray, string>();\n\t\tconst tangentCache = new Map<string, Accessor>();\n\t\tlet modified = 0;\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tconst meshName = mesh.getName();\n\t\t\tconst meshPrimitives = mesh.listPrimitives();\n\n\t\t\tfor (let i = 0; i < meshPrimitives.length; i++) {\n\t\t\t\tconst prim = meshPrimitives[i];\n\n\t\t\t\t// Skip primitives for which we can't compute tangents.\n\t\t\t\tif (!filterPrimitive(prim, logger, meshName, i, options.overwrite)) continue;\n\n\t\t\t\tconst texcoordSemantic = getNormalTexcoord(prim);\n\n\t\t\t\t// Nullability conditions checked by filterPrimitive() above.\n\t\t\t\tconst position = prim.getAttribute('POSITION')!.getArray()!;\n\t\t\t\tconst normal = prim.getAttribute('NORMAL')!.getArray()!;\n\t\t\t\tconst texcoord = prim.getAttribute(texcoordSemantic)!.getArray()!;\n\n\t\t\t\t// Compute UUIDs for each attribute.\n\t\t\t\tconst positionID = attributeIDs.get(position) || uuid();\n\t\t\t\tattributeIDs.set(position, positionID);\n\n\t\t\t\tconst normalID = attributeIDs.get(normal) || uuid();\n\t\t\t\tattributeIDs.set(normal, normalID);\n\n\t\t\t\tconst texcoordID = attributeIDs.get(texcoord) || uuid();\n\t\t\t\tattributeIDs.set(texcoord, texcoordID);\n\n\t\t\t\t// Dispose of previous TANGENT accessor if only used by this primitive (and Root).\n\t\t\t\tconst prevTangent = prim.getAttribute('TANGENT');\n\t\t\t\tif (prevTangent && prevTangent.listParents().length === 2) prevTangent.dispose();\n\n\t\t\t\t// If we've already computed tangents for this pos/norm/uv set, reuse them.\n\t\t\t\tconst attributeHash = `${positionID}|${normalID}|${texcoordID}`;\n\t\t\t\tlet tangent = tangentCache.get(attributeHash);\n\t\t\t\tif (tangent) {\n\t\t\t\t\tlogger.debug(`${NAME}: Found cache for primitive ${i} of mesh \"${meshName}\".`);\n\t\t\t\t\tprim.setAttribute('TANGENT', tangent);\n\t\t\t\t\tmodified++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Otherwise, generate tangents with the 'mikktspace' WASM library.\n\t\t\t\tlogger.debug(`${NAME}: Generating for primitive ${i} of mesh \"${meshName}\".`);\n\t\t\t\tconst tangentBuffer = prim.getAttribute('POSITION')!.getBuffer();\n\t\t\t\tconst tangentArray = options.generateTangents(\n\t\t\t\t\tposition instanceof Float32Array ? position : new Float32Array(position),\n\t\t\t\t\tnormal instanceof Float32Array ? normal : new Float32Array(normal),\n\t\t\t\t\ttexcoord instanceof Float32Array ? texcoord : new Float32Array(texcoord)\n\t\t\t\t);\n\n\t\t\t\t// See: https://github.com/KhronosGroup/glTF-Sample-Models/issues/174\n\t\t\t\tfor (let i = 3; i < tangentArray.length; i += 4) tangentArray[i] *= -1;\n\n\t\t\t\ttangent = doc.createAccessor()\n\t\t\t\t\t.setBuffer(tangentBuffer)\n\t\t\t\t\t.setArray(tangentArray)\n\t\t\t\t\t.setType('VEC4');\n\t\t\t\tprim.setAttribute('TANGENT', tangent);\n\n\t\t\t\ttangentCache.set(attributeHash, tangent);\n\t\t\t\tmodified++;\n\t\t\t}\n\t\t}\n\n\t\tif (!modified) {\n\t\t\tlogger.warn(`${NAME}: No qualifying primitives found. See debug output.`);\n\t\t} else {\n\t\t\tlogger.debug(`${NAME}: Complete.`);\n\t\t}\n\t});\n}\n\nfunction getNormalTexcoord(prim: Primitive): string {\n\tconst material = prim.getMaterial();\n\tif (!material) return 'TEXCOORD_0';\n\n\tconst normalTextureInfo = material.getNormalTextureInfo();\n\tif (!normalTextureInfo) return 'TEXCOORD_0';\n\n\tconst texcoord = normalTextureInfo.getTexCoord();\n\tconst semantic = `TEXCOORD_${texcoord}`;\n\tif (prim.getAttribute(semantic)) return semantic;\n\n\treturn 'TEXCOORD_0';\n}\n\nfunction filterPrimitive(\n\t\tprim: Primitive,\n\t\tlogger: Logger,\n\t\tmeshName: string,\n\t\ti: number,\n\t\toverwrite: boolean): boolean {\n\n\tif (prim.getMode() !== Primitive.Mode.TRIANGLES\n\t\t\t|| !prim.getAttribute('POSITION')\n\t\t\t|| !prim.getAttribute('NORMAL')\n\t\t\t|| !prim.getAttribute('TEXCOORD_0')) {\n\t\tlogger.debug(\n\t\t\t`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": primitives must`\n\t\t\t+ ' have attributes=[POSITION, NORMAL, TEXCOORD_0] and mode=TRIANGLES.'\n\t\t);\n\t\treturn false;\n\t}\n\n\tif (prim.getAttribute('TANGENT') && !overwrite) {\n\t\tlogger.debug(\n\t\t\t`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": TANGENT found.`\n\t\t);\n\t\treturn false;\n\t}\n\n\tif (prim.getIndices()) {\n\t\t// TODO(feat): Do this automatically for qualifying primitives.\n\t\tlogger.warn(\n\t\t\t`${NAME}: Skipping primitive ${i} of mesh \"${meshName}\": primitives must`\n\t\t\t+ ' be unwelded.'\n\t\t);\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n","import ndarray from 'ndarray';\nimport { lanczos2, lanczos3 } from 'ndarray-lanczos';\nimport { getPixels, savePixels } from 'ndarray-pixels';\nimport { Document, Transform, vec2 } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'textureResize';\n\n/** Options for the {@link textureResize} function. */\nexport interface TextureResizeOptions {\n\t/**\n\t * Maximum width/height to enforce, preserving aspect ratio. For example,\n\t * a 4096x8192 texture, resized with limit [2048, 2048] will be reduced\n\t * to 1024x2048.\n\t */\n\tsize: vec2;\n\t/** Resampling filter method. LANCZOS3 is sharper, LANCZOS2 is smoother. */\n\tfilter?: TextureResizeFilter;\n\t/** Pattern identifying textures to resize, matched to name or URI. */\n\tpattern?: RegExp | null;\n}\n\n/** Resampling filter methods. LANCZOS3 is sharper, LANCZOS2 is smoother. */\nexport enum TextureResizeFilter {\n\t/** Lanczos3 (sharp) */\n\tLANCZOS3 = 'lanczos3',\n\t/** Lanczos2 (smooth) */\n\tLANCZOS2 = 'lanczos2',\n}\n\nexport const TEXTURE_RESIZE_DEFAULTS: TextureResizeOptions = {\n\tsize: [2048, 2048],\n\tfilter: TextureResizeFilter.LANCZOS3,\n\tpattern: null\n};\n\n/**\n * Resize PNG or JPEG {@link Texture Textures}, with {@link https://en.wikipedia.org/wiki/Lanczos_algorithm Lanczos filtering}.\n * Implementation provided by {@link https://github.com/donmccurdy/ndarray-lanczos ndarray-lanczos} package.\n */\nexport function textureResize(_options: TextureResizeOptions = TEXTURE_RESIZE_DEFAULTS): Transform {\n\tconst options = {...TEXTURE_RESIZE_DEFAULTS, ..._options} as Required<TextureResizeOptions>;\n\n\treturn createTransform(NAME, async (doc: Document): Promise<void> => {\n\n\t\tconst logger = doc.getLogger();\n\n\t\tfor (const texture of doc.getRoot().listTextures()) {\n\t\t\tconst name = texture.getName();\n\t\t\tconst uri = texture.getURI();\n\t\t\tconst match = !options.pattern\n\t\t\t\t|| options.pattern.test(name)\n\t\t\t\t|| options.pattern.test(uri);\n\t\t\tif (!match) continue;\n\n\t\t\tif (texture.getMimeType() !== 'image/png' && texture.getMimeType() !== 'image/jpeg') {\n\t\t\t\tlogger.warn(`Skipping unsupported texture type, \"${texture.getMimeType()}\".`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst [maxWidth, maxHeight] = options.size;\n\t\t\tconst [srcWidth, srcHeight] = texture.getSize()!;\n\n\t\t\tif (srcWidth <= maxWidth && srcHeight <= maxHeight) {\n\t\t\t\tlogger.debug(`${NAME}: Skipping \"${uri || name}\", within size range.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet dstWidth = srcWidth;\n\t\t\tlet dstHeight = srcHeight;\n\n\t\t\tif (dstWidth > maxWidth) {\n\t\t\t\tdstHeight = Math.floor(dstHeight * (maxWidth / dstWidth));\n\t\t\t\tdstWidth = maxWidth;\n\t\t\t}\n\n\t\t\tif (dstHeight > maxHeight) {\n\t\t\t\tdstWidth = Math.floor(dstWidth * (maxHeight / dstHeight));\n\t\t\t\tdstHeight = maxHeight;\n\t\t\t}\n\n\t\t\tconst srcImage = texture.getImage()!;\n\t\t\tconst srcPixels = await getPixels(srcImage, texture.getMimeType());\n\t\t\tconst dstPixels = ndarray(\n\t\t\t\tnew Uint8Array(dstWidth * dstHeight * 4), [dstWidth, dstHeight, 4]\n\t\t\t);\n\n\t\t\tlogger.debug(\n\t\t\t\t`${NAME}: Resizing \"${uri || name}\", ${srcPixels.shape} → ${dstPixels.shape}...`\n\t\t\t);\n\n\t\t\ttry {\n\t\t\t\toptions.filter === TextureResizeFilter.LANCZOS3\n\t\t\t\t\t? lanczos3(srcPixels, dstPixels)\n\t\t\t\t\t: lanczos2(srcPixels, dstPixels);\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof Error) {\n\t\t\t\t\tlogger.warn(`${NAME}: Failed to resize \"${uri || name}\": \"${e.message}\".`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthrow e;\n\t\t\t}\n\n\t\t\ttexture.setImage(await savePixels(dstPixels, texture.getMimeType()));\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\n\t});\n\n}\n","import { Accessor, Document, Logger, Transform, TypedArray } from '@gltf-transform/core';\nimport { createTransform } from './utils';\n\nconst NAME = 'unweld';\n\n/** Options for the {@link unweld} function. */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface UnweldOptions {}\n\nconst UNWELD_DEFAULTS: UnweldOptions = {};\n\n/**\n * De-index {@link Primitive}s, disconnecting any shared vertices. This operation will generally\n * increase the number of vertices in a mesh, but may be helpful for some geometry operations or\n * for creating hard edges.\n *\n * No options are currently implemented for this function.\n */\nexport function unweld (_options: UnweldOptions = UNWELD_DEFAULTS): Transform {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tconst options = {...UNWELD_DEFAULTS, ..._options} as Required<UnweldOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\n\t\tconst logger = doc.getLogger();\n\t\tconst visited = new Map<Accessor, Map<Accessor, Accessor>>();\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tconst indices = prim.getIndices();\n\t\t\t\tif (!indices) continue;\n\n\t\t\t\t// Vertex attributes.\n\t\t\t\tfor (const srcAttribute of prim.listAttributes()) {\n\t\t\t\t\tprim.swap(\n\t\t\t\t\t\tsrcAttribute,\n\t\t\t\t\t\tunweldAttribute(srcAttribute, indices, logger, visited)\n\t\t\t\t\t);\n\n\t\t\t\t\t// Clean up.\n\t\t\t\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t\t\t\t}\n\n\t\t\t\t// Morph target vertex attributes.\n\t\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\t\tfor (const srcAttribute of target.listAttributes()) {\n\t\t\t\t\t\ttarget.swap(\n\t\t\t\t\t\t\tsrcAttribute,\n\t\t\t\t\t\t\tunweldAttribute(srcAttribute, indices, logger, visited)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// Clean up.\n\t\t\t\t\t\tif (srcAttribute.listParents().length === 1) srcAttribute.dispose();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Clean up.\n\t\t\t\tprim.setIndices(null);\n\t\t\t\tif (indices.listParents().length === 1) indices.dispose();\n\t\t\t}\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\nfunction unweldAttribute(\n\t\tsrcAttribute: Accessor,\n\t\tindices: Accessor,\n\t\tlogger: Logger,\n\t\tvisited: Map<Accessor, Map<Accessor, Accessor>>): Accessor {\n\tif (visited.has(srcAttribute) && visited.get(srcAttribute)!.has(indices)) {\n\t\tlogger.debug(`${NAME}: Cache hit for reused attribute, \"${srcAttribute.getName()}\".`);\n\t\treturn visited.get(srcAttribute)!.get(indices)!;\n\t}\n\n\tconst dstAttribute = srcAttribute.clone();\n\tconst ArrayCtor = srcAttribute.getArray()!.constructor as\n\t\tnew (len: number) => TypedArray;\n\tdstAttribute.setArray(\n\t\tnew ArrayCtor(indices.getCount() * srcAttribute.getElementSize())\n\t);\n\n\tconst el: number[] = [];\n\tfor (let i = 0; i < indices.getCount(); i++) {\n\t\tdstAttribute.setElement(i, srcAttribute.getElement(indices.getScalar(i), el));\n\t}\n\n\tif (!visited.has(srcAttribute)) visited.set(srcAttribute, new Map());\n\tvisited.get(srcAttribute)!.set(indices, dstAttribute);\n\n\treturn dstAttribute;\n}\n","import { Accessor, Document, Primitive, PrimitiveTarget, Transform, TypedArray } from '@gltf-transform/core';\nimport { getGLPrimitiveCount, createTransform } from './utils';\n\nconst NAME = 'weld';\n\n/** Options for the {@link weld} function. */\nexport interface WeldOptions {\n\t/** Per-attribute tolerance used when merging similar vertices. */\n\ttolerance?: number\n}\n\nconst WELD_DEFAULTS: Required<WeldOptions> = {tolerance: 1e-4};\n\n/**\n * Index {@link Primitive}s and (optionally) merge similar vertices.\n */\nexport function weld (_options: WeldOptions = WELD_DEFAULTS): Transform {\n\tconst options = {...WELD_DEFAULTS, ..._options} as Required<WeldOptions>;\n\n\treturn createTransform(NAME, (doc: Document): void => {\n\t\tconst logger = doc.getLogger();\n\n\t\tfor (const mesh of doc.getRoot().listMeshes()) {\n\t\t\tfor (const prim of mesh.listPrimitives()) {\n\t\t\t\tif (options.tolerance === 0) {\n\t\t\t\t\tweldOnly(doc, prim);\n\t\t\t\t} else {\n\t\t\t\t\tweldAndMerge(doc, prim, options);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlogger.debug(`${NAME}: Complete.`);\n\t});\n}\n\n/**  In-place weld, adds indices without changing number of vertices. */\nfunction weldOnly (doc: Document, prim: Primitive): void {\n\tif (prim.getIndices()) return;\n\tconst attr = prim.listAttributes()[0];\n\tconst numVertices = attr.getCount();\n\tconst buffer = attr.getBuffer();\n\tconst indicesArray = numVertices <= 65534\n\t\t? new Uint16Array(getGLPrimitiveCount(prim) * 3)\n\t\t: new Uint32Array(getGLPrimitiveCount(prim) * 3);\n\tconst indices = doc.createAccessor()\n\t\t.setBuffer(buffer)\n\t\t.setType(Accessor.Type.SCALAR)\n\t\t.setArray(indicesArray);\n\tfor (let i = 0; i < indices.getCount(); i++) indices.setScalar(i, i);\n\tprim.setIndices(indices);\n}\n\n/**\n * Weld and merge, combining vertices that are similar on all vertex attributes. Morph target\n * attributes are not considered when scoring vertex similarity, but are retained when merging.\n */\nfunction weldAndMerge (doc: Document, prim: Primitive, options: Required<WeldOptions>): void {\n\tconst tolerance = Math.max(options.tolerance, Number.EPSILON);\n\tconst decimalShift = Math.log10(1 / tolerance);\n\tconst shiftFactor = Math.pow(10, decimalShift);\n\n\tconst hashToIndex: {[key: string]: number} = {};\n\tconst srcIndices = prim.getIndices();\n\tconst vertexCount = srcIndices\n\t\t? srcIndices.getCount()\n\t\t: prim.listAttributes()[0].getCount();\n\n\t// Prepare storage for new elements of each attribute.\n\tconst dstAttributes = new Map<Accessor, number[][]>();\n\tprim.listAttributes().forEach((attr) => dstAttributes.set(attr, []));\n\tprim.listTargets().forEach((target) => {\n\t\ttarget.listAttributes().forEach((attr) => dstAttributes.set(attr, []));\n\t});\n\n\tconst dstIndicesArray = [];\n\tlet nextIndex = 0;\n\n\t// For each vertex, compute a hash based on its tolerance and merge with any sufficiently\n\t// similar vertices.\n\tfor (let i = 0; i < vertexCount; i++) {\n\t\tconst index = srcIndices ? srcIndices.getScalar(i) : i;\n\n\t\tconst hashElements: number[] = [];\n\t\tconst el: number[] = [];\n\t\tfor (const attribute of prim.listAttributes()) {\n\t\t\tfor (let j = 0; j < attribute.getElementSize(); j++) {\n\t\t\t\thashElements.push(~ ~ (attribute.getElement(index, el)[j] * shiftFactor));\n\t\t\t}\n\t\t}\n\n\t\tconst hash = hashElements.join('|');\n\t\tif (hash in hashToIndex) {\n\t\t\tdstIndicesArray.push(hashToIndex[hash]);\n\t\t} else {\n\t\t\tfor (const attr of prim.listAttributes()) {\n\t\t\t\tdstAttributes.get(attr)!.push(attr.getElement(index, []));\n\t\t\t}\n\t\t\tfor (const target of prim.listTargets()) {\n\t\t\t\tfor (const attr of target.listAttributes()) {\n\t\t\t\t\tdstAttributes.get(attr)!.push(attr.getElement(index, []));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thashToIndex[hash] = nextIndex;\n\t\t\tdstIndicesArray.push(nextIndex);\n\t\t\tnextIndex++;\n\t\t}\n\t}\n\n\tconst srcVertexCount = prim.listAttributes()[0].getCount();\n\tconst dstVertexCount = dstAttributes.get(prim.getAttribute('POSITION')!)!.length;\n\tdoc.getLogger().debug(`${NAME}: ${srcVertexCount} → ${dstVertexCount} vertices.`);\n\n\t// Update the primitive.\n\tfor (const srcAttr of prim.listAttributes()) {\n\t\tswapAttributes(prim, srcAttr, dstAttributes.get(srcAttr)!);\n\n\t\t// Clean up.\n\t\tif (srcAttr.listParents().length === 1) srcAttr.dispose();\n\t}\n\tfor (const target of prim.listTargets()) {\n\t\tfor (const srcAttr of target.listAttributes()) {\n\t\t\tswapAttributes(target, srcAttr, dstAttributes.get(srcAttr)!);\n\n\t\t\t// Clean up.\n\t\t\tif (srcAttr.listParents().length === 1) srcAttr.dispose();\n\t\t}\n\t}\n\tif (srcIndices) {\n\t\tconst dstIndicesTypedArray\n\t\t\t= createArrayOfType(srcIndices.getArray()!, dstIndicesArray.length);\n\t\tdstIndicesTypedArray.set(dstIndicesArray);\n\t\tprim.setIndices(srcIndices.clone().setArray(dstIndicesTypedArray));\n\n\t\t// Clean up.\n\t\tif (srcIndices.listParents().length === 1) srcIndices.dispose();\n\t} else {\n\t\tconst indicesArray = srcVertexCount <= 65534\n\t\t\t? new Uint16Array(dstIndicesArray)\n\t\t\t: new Uint32Array(dstIndicesArray);\n\t\tprim.setIndices(doc.createAccessor().setArray(indicesArray));\n\t}\n}\n\n/** Creates a new TypedArray of the same type as an original, with a new length. */\nfunction createArrayOfType<T extends TypedArray>(array: T, length: number): T {\n\tconst ArrayCtor = array.constructor as new (length: number) => T;\n\treturn new ArrayCtor(length);\n}\n\n/** Replaces an {@link Attribute}, creating a new one with the given elements. */\nfunction swapAttributes(\n\t\tparent: Primitive | PrimitiveTarget,\n\t\tsrcAttr: Accessor,\n\t\tdstAttrElements: number[][]): void {\n\tconst dstAttrArrayLength = dstAttrElements.length * srcAttr.getElementSize();\n\tconst dstAttrArray = createArrayOfType(srcAttr.getArray()!, dstAttrArrayLength);\n\tconst dstAttr = srcAttr.clone().setArray(dstAttrArray);\n\n\tfor (let i = 0; i < dstAttrElements.length; i++) {\n\t\tdstAttr.setElement(i, dstAttrElements[i]);\n\t}\n\n\tparent.swap(srcAttr, dstAttr);\n}\n",null,"import ndarray from 'ndarray';\nimport type { NdArray } from 'ndarray';\nimport ops from 'ndarray-ops';\n\nexport interface SavePixelsOptions {quality?: number}\n\nexport default savePixels;\n\nfunction savePixels(array: NdArray, type: 'canvas'): HTMLCanvasElement;\nfunction savePixels(array: NdArray, type: 'png'): Readable;\nfunction savePixels(array: NdArray, type: 'jpeg' | 'jpg', options?: SavePixelsOptions): Readable;\nfunction savePixels(\n\tarray: NdArray, type: 'canvas' | 'png' | 'jpeg' | 'jpg',\n\toptions: SavePixelsOptions = {}\n): Readable | HTMLCanvasElement {\n\n\t// Create HTMLCanvasElement and write pixel data.\n\tconst canvas = document.createElement('canvas');\n\tcanvas.width = array.shape[0];\n\tcanvas.height = array.shape[1];\n\n\tconst context = canvas.getContext('2d')!;\n\tconst imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n\n\ttry {\n\t\thandleData(array, imageData.data);\n\t} catch (e) {\n\t\t// Pass errors to stream, to match 'save-pixels' behavior.\n\t\treturn Readable.from(Promise.reject(e));\n\t}\n\n\tcontext.putImageData(imageData, 0, 0);\n\n\tconst quality = options.quality ? options.quality / 100 : undefined;\n\n\t// Encode to target format.\n\tswitch (type) {\n\t\tcase 'canvas':\n\t\t\treturn canvas;\n\t\tcase 'jpg':\n\t\tcase 'jpeg':\n\t\t\treturn streamCanvas(canvas, 'image/jpeg', quality);\n\t\tcase 'png':\n\t\t\treturn streamCanvas(canvas, 'image/png');\n\t\tdefault:\n\t\t\tthrow new Error('[ndarray-pixels] Unsupported file type: ' + type);\n\t}\n}\n\n/** Creates readable stream from given HTMLCanvasElement and options. */\nfunction streamCanvas(canvas: HTMLCanvasElement, mimeType: string, quality?: number): Readable {\n\tconst promise = new Promise<Uint8Array>((resolve, reject) => {\n\t\tcanvas.toBlob(async (blob) => {\n\t\t\tif (blob) {\n\t\t\t\tresolve(new Uint8Array(await blob.arrayBuffer()));\n\t\t\t} else {\n\t\t\t\treject(new Error('[ndarray-pixels] Failed to canvas.toBlob().'));\n\t\t\t}\n\t\t}, mimeType, quality);\n\t});\n\treturn Readable.from(promise);\n}\n\nfunction handleData(\n\tarray: NdArray,\n\tdata: Uint8Array | Uint8ClampedArray,\n\tframe = -1\n): Uint8Array | Uint8ClampedArray {\n\n\tif (array.shape.length === 4) {\n\t\treturn handleData(array.pick(frame), data, 0);\n\t} else if (array.shape.length === 3) {\n\t\tif (array.shape[2] === 3) {\n\t\t\tops.assign(\n\t\t\t\tndarray(\n\t\t\t\t\tdata,\n\t\t\t\t\t[array.shape[0], array.shape[1], 3],\n\t\t\t\t\t[4, 4 * array.shape[0], 1]\n\t\t\t\t),\n\t\t\t\tarray\n\t\t\t);\n\t\t\tops.assigns(\n\t\t\t\tndarray(\n\t\t\t\t\tdata,\n\t\t\t\t\t[array.shape[0] * array.shape[1]],\n\t\t\t\t\t[4],\n\t\t\t\t\t3\n\t\t\t\t),\n\t\t\t\t255\n\t\t\t);\n\t\t} else if (array.shape[2] === 4) {\n\t\t\tops.assign(\n\t\t\t\tndarray(\n\t\t\t\t\tdata,\n\t\t\t\t\t[array.shape[0], array.shape[1], 4],\n\t\t\t\t\t[4, array.shape[0] * 4, 1]\n\t\t\t\t),\n\t\t\t\tarray\n\t\t\t);\n\t\t} else if (array.shape[2] === 1) {\n\t\t\tops.assign(\n\t\t\t\tndarray(\n\t\t\t\t\tdata,\n\t\t\t\t\t[array.shape[0], array.shape[1], 3],\n\t\t\t\t\t[4, 4 * array.shape[0], 1]\n\t\t\t\t),\n\t\t\t\tndarray(\n\t\t\t\t\tarray.data,\n\t\t\t\t\t[array.shape[0], array.shape[1], 3],\n\t\t\t\t\t[array.stride[0], array.stride[1], 0],\n\t\t\t\t\tarray.offset\n\t\t\t\t)\n\t\t\t);\n\t\t\tops.assigns(\n\t\t\t\tndarray(\n\t\t\t\t\tdata,\n\t\t\t\t\t[array.shape[0] * array.shape[1]],\n\t\t\t\t\t[4],\n\t\t\t\t\t3\n\t\t\t\t),\n\t\t\t\t255\n\t\t\t);\n\t\t} else {\n\t\t\tthrow new Error('[ndarray-pixels] Incompatible array shape.');\n\t\t}\n\t} else if (array.shape.length === 2) {\n\t\tops.assign(\n\t\t\tndarray(data,\n\t\t\t[array.shape[0], array.shape[1], 3],\n\t\t\t[4, 4 * array.shape[0], 1]),\n\t\t\tndarray(array.data,\n\t\t\t[array.shape[0], array.shape[1], 3],\n\t\t\t[array.stride[0], array.stride[1], 0],\n\t\t\tarray.offset)\n\t\t);\n\t\tops.assigns(\n\t\t\tndarray(data,\n\t\t\t[array.shape[0] * array.shape[1]],\n\t\t\t[4],\n\t\t\t3),\n\t\t\t255\n\t\t);\n\t} else {\n\t\tthrow new Error('[ndarray-pixels] Incompatible array shape.');\n\t}\n\treturn data;\n}\n\nclass Readable {\n\tconstructor (private _promise: Promise<Uint8Array>) {}\n\n\ton(event: 'data' | 'error' | 'end', fn: (res?: Uint8Array | Error) => void): this {\n\t\tif (event === 'data') {\n\t\t\tthis._promise.then(fn);\n\t\t} else if (event === 'error') {\n\t\t\tthis._promise.catch(fn)\n\t\t} else if (event === 'end') {\n\t\t\tthis._promise.finally(fn);\n\t\t}\n\t\treturn this;\n\t}\n\n\tstatic from (promise: Promise<Uint8Array>): Readable {\n\t\treturn new Readable(promise);\n\t}\n}\n","import getPixelsInternal from 'get-pixels';\nimport type { NdArray } from 'ndarray';\nimport savePixelsInternal from 'save-pixels';\n\n/**\n * Decodes image data to an `ndarray`.\n *\n * MIME type is optional when given a path or URL, and required when given a Uint8Array.\n *\n * Accepts `image/png` or `image/jpeg` in Node.js, and additional formats on browsers with\n * the necessary support in Canvas 2D.\n *\n * @param data\n * @param mimeType `image/jpeg`, `image/png`, etc.\n * @returns\n */\nasync function getPixels (data: string | Uint8Array, mimeType?: string): Promise<NdArray> {\n    // In Node.js, get-pixels needs a Buffer and won't accept Uint8Array.\n    if (data instanceof Uint8Array && typeof Buffer !== 'undefined') {\n        data = Buffer.from(data);\n    }\n\n    return new Promise((resolve, reject) => {\n        getPixelsInternal(data, mimeType!, (err: Error | null, pixels: NdArray) => {\n            if (pixels && !err) {\n                resolve(pixels);\n            } else {\n                reject(err);\n            }\n        });\n    });\n}\n\n/**\n * Encodes an `ndarray` as image data in the given format.\n *\n * If the source `ndarray` was constructed manually with default stride, use\n * `ndarray.transpose(1, 0)` to reshape it and ensure an identical result from getPixels(). For an\n * ndarray created by getPixels(), this isn't necessary.\n *\n * Accepts `image/png` or `image/jpeg` in Node.js, and additional formats on browsers with\n * the necessary support in Canvas 2D.\n *\n * @param pixels ndarray of shape W x H x 4.\n * @param mimeType `image/jpeg`, `image/png`, etc.\n * @returns\n */\nasync function savePixels (pixels: NdArray, mimeType: string): Promise<Uint8Array> {\n    return new Promise((resolve, reject) => {\n        const chunks: Uint8Array[] = [];\n        const internalType = mimeType.replace('image/', '') as 'png' | 'gif';\n        savePixelsInternal(pixels, internalType)\n            .on('data', (d: Uint8Array) => chunks.push(d))\n            .on('end', () => resolve(concat(chunks)))\n            .on('error', (e: Error) => reject(e));\n    });\n}\n\nfunction concat (arrays: Uint8Array[]): Uint8Array {\n    let totalByteLength = 0;\n    for (const array of arrays) {\n        totalByteLength += array.byteLength;\n    }\n\n    const result = new Uint8Array(totalByteLength);\n\n    let byteOffset = 0;\n    for (const array of arrays) {\n        result.set(array, byteOffset);\n        byteOffset += array.byteLength;\n    }\n\n    return result;\n}\n\nexport {getPixels, savePixels};\n","import ndarray from 'ndarray';\nimport type { NdArray } from 'ndarray';\n\nexport type GetPixelsCallback = (err: string | Event | null, pixels?: NdArray) => void;\n\nexport default getPixels;\n\nfunction getPixels(path: string, callback: GetPixelsCallback): void;\nfunction getPixels(path: string | Uint8Array, type: string, callback: GetPixelsCallback): void\nfunction getPixels(path: string | Uint8Array, typeOrCallback: string | GetPixelsCallback, callback?: GetPixelsCallback): void {\n\tcallback = callback || typeOrCallback as GetPixelsCallback;\n\n\t// Construct a Blob URL for Uint8Array inputs.\n\tif (path instanceof Uint8Array) {\n\t\tif (typeof typeOrCallback !== 'string') {\n\t\t\tthrow new Error('[ndarray-pixels] Type must be given for Uint8Array image data');\n\t\t}\n\t\tconst blob = new Blob([path], {type: typeOrCallback});\n\t\tpath = URL.createObjectURL(blob);\n\t}\n\n\t// Decode image with Canvas API.\n\tconst img = new Image();\n\timg.crossOrigin = 'anonymous';\n\timg.onload = function() {\n\t\tURL.revokeObjectURL(path as string);\n\n\t\tconst canvas = document.createElement('canvas');\n\t\tcanvas.width = img.width;\n\t\tcanvas.height = img.height;\n\t\tconst context = canvas.getContext('2d')!;\n\t\tcontext.drawImage(img, 0, 0);\n\t\tconst pixels = context.getImageData(0, 0, img.width, img.height)\n\t\tcallback!(null, ndarray(new Uint8Array(pixels.data), [img.width, img.height, 4], [4, 4*img.width, 1], 0));\n\t}\n\timg.onerror = (err) => {\n\t\tURL.revokeObjectURL(path as string);\n\t\tcallback!(err);\n\t};\n\timg.src = path;\n}\n","var iota = require(\"iota-array\")\nvar isBuffer = require(\"is-buffer\")\n\nvar hasTypedArrays  = ((typeof Float64Array) !== \"undefined\")\n\nfunction compare1st(a, b) {\n  return a[0] - b[0]\n}\n\nfunction order() {\n  var stride = this.stride\n  var terms = new Array(stride.length)\n  var i\n  for(i=0; i<terms.length; ++i) {\n    terms[i] = [Math.abs(stride[i]), i]\n  }\n  terms.sort(compare1st)\n  var result = new Array(terms.length)\n  for(i=0; i<result.length; ++i) {\n    result[i] = terms[i][1]\n  }\n  return result\n}\n\nfunction compileConstructor(dtype, dimension) {\n  var className = [\"View\", dimension, \"d\", dtype].join(\"\")\n  if(dimension < 0) {\n    className = \"View_Nil\" + dtype\n  }\n  var useGetters = (dtype === \"generic\")\n\n  if(dimension === -1) {\n    //Special case for trivial arrays\n    var code =\n      \"function \"+className+\"(a){this.data=a;};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return -1};\\\nproto.size=0;\\\nproto.dimension=-1;\\\nproto.shape=proto.stride=proto.order=[];\\\nproto.lo=proto.hi=proto.transpose=proto.step=\\\nfunction(){return new \"+className+\"(this.data);};\\\nproto.get=proto.set=function(){};\\\nproto.pick=function(){return null};\\\nreturn function construct_\"+className+\"(a){return new \"+className+\"(a);}\"\n    var procedure = new Function(code)\n    return procedure()\n  } else if(dimension === 0) {\n    //Special case for 0d arrays\n    var code =\n      \"function \"+className+\"(a,d) {\\\nthis.data = a;\\\nthis.offset = d\\\n};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return this.offset};\\\nproto.dimension=0;\\\nproto.size=1;\\\nproto.shape=\\\nproto.stride=\\\nproto.order=[];\\\nproto.lo=\\\nproto.hi=\\\nproto.transpose=\\\nproto.step=function \"+className+\"_copy() {\\\nreturn new \"+className+\"(this.data,this.offset)\\\n};\\\nproto.pick=function \"+className+\"_pick(){\\\nreturn TrivialArray(this.data);\\\n};\\\nproto.valueOf=proto.get=function \"+className+\"_get(){\\\nreturn \"+(useGetters ? \"this.data.get(this.offset)\" : \"this.data[this.offset]\")+\n\"};\\\nproto.set=function \"+className+\"_set(v){\\\nreturn \"+(useGetters ? \"this.data.set(this.offset,v)\" : \"this.data[this.offset]=v\")+\"\\\n};\\\nreturn function construct_\"+className+\"(a,b,c,d){return new \"+className+\"(a,d)}\"\n    var procedure = new Function(\"TrivialArray\", code)\n    return procedure(CACHED_CONSTRUCTORS[dtype][0])\n  }\n\n  var code = [\"'use strict'\"]\n\n  //Create constructor for view\n  var indices = iota(dimension)\n  var args = indices.map(function(i) { return \"i\"+i })\n  var index_str = \"this.offset+\" + indices.map(function(i) {\n        return \"this.stride[\" + i + \"]*i\" + i\n      }).join(\"+\")\n  var shapeArg = indices.map(function(i) {\n      return \"b\"+i\n    }).join(\",\")\n  var strideArg = indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")\n  code.push(\n    \"function \"+className+\"(a,\" + shapeArg + \",\" + strideArg + \",d){this.data=a\",\n      \"this.shape=[\" + shapeArg + \"]\",\n      \"this.stride=[\" + strideArg + \"]\",\n      \"this.offset=d|0}\",\n    \"var proto=\"+className+\".prototype\",\n    \"proto.dtype='\"+dtype+\"'\",\n    \"proto.dimension=\"+dimension)\n\n  //view.size:\n  code.push(\"Object.defineProperty(proto,'size',{get:function \"+className+\"_size(){\\\nreturn \"+indices.map(function(i) { return \"this.shape[\"+i+\"]\" }).join(\"*\"),\n\"}})\")\n\n  //view.order:\n  if(dimension === 1) {\n    code.push(\"proto.order=[0]\")\n  } else {\n    code.push(\"Object.defineProperty(proto,'order',{get:\")\n    if(dimension < 4) {\n      code.push(\"function \"+className+\"_order(){\")\n      if(dimension === 2) {\n        code.push(\"return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})\")\n      } else if(dimension === 3) {\n        code.push(\n\"var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);\\\nif(s0>s1){\\\nif(s1>s2){\\\nreturn [2,1,0];\\\n}else if(s0>s2){\\\nreturn [1,2,0];\\\n}else{\\\nreturn [1,0,2];\\\n}\\\n}else if(s0>s2){\\\nreturn [2,0,1];\\\n}else if(s2>s1){\\\nreturn [0,1,2];\\\n}else{\\\nreturn [0,2,1];\\\n}}})\")\n      }\n    } else {\n      code.push(\"ORDER})\")\n    }\n  }\n\n  //view.set(i0, ..., v):\n  code.push(\n\"proto.set=function \"+className+\"_set(\"+args.join(\",\")+\",v){\")\n  if(useGetters) {\n    code.push(\"return this.data.set(\"+index_str+\",v)}\")\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]=v}\")\n  }\n\n  //view.get(i0, ...):\n  code.push(\"proto.get=function \"+className+\"_get(\"+args.join(\",\")+\"){\")\n  if(useGetters) {\n    code.push(\"return this.data.get(\"+index_str+\")}\")\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]}\")\n  }\n\n  //view.index:\n  code.push(\n    \"proto.index=function \"+className+\"_index(\", args.join(), \"){return \"+index_str+\"}\")\n\n  //view.hi():\n  code.push(\"proto.hi=function \"+className+\"_hi(\"+args.join(\",\")+\"){return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return [\"(typeof i\",i,\"!=='number'||i\",i,\"<0)?this.shape[\", i, \"]:i\", i,\"|0\"].join(\"\")\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"this.stride[\"+i + \"]\"\n    }).join(\",\")+\",this.offset)}\")\n\n  //view.lo():\n  var a_vars = indices.map(function(i) { return \"a\"+i+\"=this.shape[\"+i+\"]\" })\n  var c_vars = indices.map(function(i) { return \"c\"+i+\"=this.stride[\"+i+\"]\" })\n  code.push(\"proto.lo=function \"+className+\"_lo(\"+args.join(\",\")+\"){var b=this.offset,d=0,\"+a_vars.join(\",\")+\",\"+c_vars.join(\",\"))\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){\\\nd=i\"+i+\"|0;\\\nb+=c\"+i+\"*d;\\\na\"+i+\"-=d}\")\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\"+i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")+\",b)}\")\n\n  //view.step():\n  code.push(\"proto.step=function \"+className+\"_step(\"+args.join(\",\")+\"){var \"+\n    indices.map(function(i) {\n      return \"a\"+i+\"=this.shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\"+i+\"=this.stride[\"+i+\"]\"\n    }).join(\",\")+\",c=this.offset,d=0,ceil=Math.ceil\")\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'){\\\nd=i\"+i+\"|0;\\\nif(d<0){\\\nc+=b\"+i+\"*(a\"+i+\"-1);\\\na\"+i+\"=ceil(-a\"+i+\"/d)\\\n}else{\\\na\"+i+\"=ceil(a\"+i+\"/d)\\\n}\\\nb\"+i+\"*=d\\\n}\")\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\" + i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\" + i\n    }).join(\",\")+\",c)}\")\n\n  //view.transpose():\n  var tShape = new Array(dimension)\n  var tStride = new Array(dimension)\n  for(var i=0; i<dimension; ++i) {\n    tShape[i] = \"a[i\"+i+\"]\"\n    tStride[i] = \"b[i\"+i+\"]\"\n  }\n  code.push(\"proto.transpose=function \"+className+\"_transpose(\"+args+\"){\"+\n    args.map(function(n,idx) { return n + \"=(\" + n + \"===undefined?\" + idx + \":\" + n + \"|0)\"}).join(\";\"),\n    \"var a=this.shape,b=this.stride;return new \"+className+\"(this.data,\"+tShape.join(\",\")+\",\"+tStride.join(\",\")+\",this.offset)}\")\n\n  //view.pick():\n  code.push(\"proto.pick=function \"+className+\"_pick(\"+args+\"){var a=[],b=[],c=this.offset\")\n  for(var i=0; i<dimension; ++i) {\n    code.push(\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){c=(c+this.stride[\"+i+\"]*i\"+i+\")|0}else{a.push(this.shape[\"+i+\"]);b.push(this.stride[\"+i+\"])}\")\n  }\n  code.push(\"var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}\")\n\n  //Add return statement\n  code.push(\"return function construct_\"+className+\"(data,shape,stride,offset){return new \"+className+\"(data,\"+\n    indices.map(function(i) {\n      return \"shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"stride[\"+i+\"]\"\n    }).join(\",\")+\",offset)}\")\n\n  //Compile procedure\n  var procedure = new Function(\"CTOR_LIST\", \"ORDER\", code.join(\"\\n\"))\n  return procedure(CACHED_CONSTRUCTORS[dtype], order)\n}\n\nfunction arrayDType(data) {\n  if(isBuffer(data)) {\n    return \"buffer\"\n  }\n  if(hasTypedArrays) {\n    switch(Object.prototype.toString.call(data)) {\n      case \"[object Float64Array]\":\n        return \"float64\"\n      case \"[object Float32Array]\":\n        return \"float32\"\n      case \"[object Int8Array]\":\n        return \"int8\"\n      case \"[object Int16Array]\":\n        return \"int16\"\n      case \"[object Int32Array]\":\n        return \"int32\"\n      case \"[object Uint8Array]\":\n        return \"uint8\"\n      case \"[object Uint16Array]\":\n        return \"uint16\"\n      case \"[object Uint32Array]\":\n        return \"uint32\"\n      case \"[object Uint8ClampedArray]\":\n        return \"uint8_clamped\"\n      case \"[object BigInt64Array]\":\n        return \"bigint64\"\n      case \"[object BigUint64Array]\":\n        return \"biguint64\"\n    }\n  }\n  if(Array.isArray(data)) {\n    return \"array\"\n  }\n  return \"generic\"\n}\n\nvar CACHED_CONSTRUCTORS = {\n  \"float32\":[],\n  \"float64\":[],\n  \"int8\":[],\n  \"int16\":[],\n  \"int32\":[],\n  \"uint8\":[],\n  \"uint16\":[],\n  \"uint32\":[],\n  \"array\":[],\n  \"uint8_clamped\":[],\n  \"bigint64\": [],\n  \"biguint64\": [],\n  \"buffer\":[],\n  \"generic\":[]\n}\n\n;(function() {\n  for(var id in CACHED_CONSTRUCTORS) {\n    CACHED_CONSTRUCTORS[id].push(compileConstructor(id, -1))\n  }\n});\n\nfunction wrappedNDArrayCtor(data, shape, stride, offset) {\n  if(data === undefined) {\n    var ctor = CACHED_CONSTRUCTORS.array[0]\n    return ctor([])\n  } else if(typeof data === \"number\") {\n    data = [data]\n  }\n  if(shape === undefined) {\n    shape = [ data.length ]\n  }\n  var d = shape.length\n  if(stride === undefined) {\n    stride = new Array(d)\n    for(var i=d-1, sz=1; i>=0; --i) {\n      stride[i] = sz\n      sz *= shape[i]\n    }\n  }\n  if(offset === undefined) {\n    offset = 0\n    for(var i=0; i<d; ++i) {\n      if(stride[i] < 0) {\n        offset -= (shape[i]-1)*stride[i]\n      }\n    }\n  }\n  var dtype = arrayDType(data)\n  var ctor_list = CACHED_CONSTRUCTORS[dtype]\n  while(ctor_list.length <= d+1) {\n    ctor_list.push(compileConstructor(dtype, ctor_list.length-1))\n  }\n  var ctor = ctor_list[d+1]\n  return ctor(data, shape, stride, offset)\n}\n\nmodule.exports = wrappedNDArrayCtor\n","\"use strict\"\n\nfunction iota(n) {\n  var result = new Array(n)\n  for(var i=0; i<n; ++i) {\n    result[i] = i\n  }\n  return result\n}\n\nmodule.exports = iota","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","\"use strict\"\n\nvar compile = require(\"cwise-compiler\")\n\nvar EmptyProc = {\n  body: \"\",\n  args: [],\n  thisVars: [],\n  localVars: []\n}\n\nfunction fixup(x) {\n  if(!x) {\n    return EmptyProc\n  }\n  for(var i=0; i<x.args.length; ++i) {\n    var a = x.args[i]\n    if(i === 0) {\n      x.args[i] = {name: a, lvalue:true, rvalue: !!x.rvalue, count:x.count||1 }\n    } else {\n      x.args[i] = {name: a, lvalue:false, rvalue:true, count: 1}\n    }\n  }\n  if(!x.thisVars) {\n    x.thisVars = []\n  }\n  if(!x.localVars) {\n    x.localVars = []\n  }\n  return x\n}\n\nfunction pcompile(user_args) {\n  return compile({\n    args:     user_args.args,\n    pre:      fixup(user_args.pre),\n    body:     fixup(user_args.body),\n    post:     fixup(user_args.proc),\n    funcName: user_args.funcName\n  })\n}\n\nfunction makeOp(user_args) {\n  var args = []\n  for(var i=0; i<user_args.args.length; ++i) {\n    args.push(\"a\"+i)\n  }\n  var wrapper = new Function(\"P\", [\n    \"return function \", user_args.funcName, \"_ndarrayops(\", args.join(\",\"), \") {P(\", args.join(\",\"), \");return a0}\"\n  ].join(\"\"))\n  return wrapper(pcompile(user_args))\n}\n\nvar assign_ops = {\n  add:  \"+\",\n  sub:  \"-\",\n  mul:  \"*\",\n  div:  \"/\",\n  mod:  \"%\",\n  band: \"&\",\n  bor:  \"|\",\n  bxor: \"^\",\n  lshift: \"<<\",\n  rshift: \">>\",\n  rrshift: \">>>\"\n}\n;(function(){\n  for(var id in assign_ops) {\n    var op = assign_ops[id]\n    exports[id] = makeOp({\n      args: [\"array\",\"array\",\"array\"],\n      body: {args:[\"a\",\"b\",\"c\"],\n             body: \"a=b\"+op+\"c\"},\n      funcName: id\n    })\n    exports[id+\"eq\"] = makeOp({\n      args: [\"array\",\"array\"],\n      body: {args:[\"a\",\"b\"],\n             body:\"a\"+op+\"=b\"},\n      rvalue: true,\n      funcName: id+\"eq\"\n    })\n    exports[id+\"s\"] = makeOp({\n      args: [\"array\", \"array\", \"scalar\"],\n      body: {args:[\"a\",\"b\",\"s\"],\n             body:\"a=b\"+op+\"s\"},\n      funcName: id+\"s\"\n    })\n    exports[id+\"seq\"] = makeOp({\n      args: [\"array\",\"scalar\"],\n      body: {args:[\"a\",\"s\"],\n             body:\"a\"+op+\"=s\"},\n      rvalue: true,\n      funcName: id+\"seq\"\n    })\n  }\n})();\n\nvar unary_ops = {\n  not: \"!\",\n  bnot: \"~\",\n  neg: \"-\",\n  recip: \"1.0/\"\n}\n;(function(){\n  for(var id in unary_ops) {\n    var op = unary_ops[id]\n    exports[id] = makeOp({\n      args: [\"array\", \"array\"],\n      body: {args:[\"a\",\"b\"],\n             body:\"a=\"+op+\"b\"},\n      funcName: id\n    })\n    exports[id+\"eq\"] = makeOp({\n      args: [\"array\"],\n      body: {args:[\"a\"],\n             body:\"a=\"+op+\"a\"},\n      rvalue: true,\n      count: 2,\n      funcName: id+\"eq\"\n    })\n  }\n})();\n\nvar binary_ops = {\n  and: \"&&\",\n  or: \"||\",\n  eq: \"===\",\n  neq: \"!==\",\n  lt: \"<\",\n  gt: \">\",\n  leq: \"<=\",\n  geq: \">=\"\n}\n;(function() {\n  for(var id in binary_ops) {\n    var op = binary_ops[id]\n    exports[id] = makeOp({\n      args: [\"array\",\"array\",\"array\"],\n      body: {args:[\"a\", \"b\", \"c\"],\n             body:\"a=b\"+op+\"c\"},\n      funcName: id\n    })\n    exports[id+\"s\"] = makeOp({\n      args: [\"array\",\"array\",\"scalar\"],\n      body: {args:[\"a\", \"b\", \"s\"],\n             body:\"a=b\"+op+\"s\"},\n      funcName: id+\"s\"\n    })\n    exports[id+\"eq\"] = makeOp({\n      args: [\"array\", \"array\"],\n      body: {args:[\"a\", \"b\"],\n             body:\"a=a\"+op+\"b\"},\n      rvalue:true,\n      count:2,\n      funcName: id+\"eq\"\n    })\n    exports[id+\"seq\"] = makeOp({\n      args: [\"array\", \"scalar\"],\n      body: {args:[\"a\",\"s\"],\n             body:\"a=a\"+op+\"s\"},\n      rvalue:true,\n      count:2,\n      funcName: id+\"seq\"\n    })\n  }\n})();\n\nvar math_unary = [\n  \"abs\",\n  \"acos\",\n  \"asin\",\n  \"atan\",\n  \"ceil\",\n  \"cos\",\n  \"exp\",\n  \"floor\",\n  \"log\",\n  \"round\",\n  \"sin\",\n  \"sqrt\",\n  \"tan\"\n]\n;(function() {\n  for(var i=0; i<math_unary.length; ++i) {\n    var f = math_unary[i]\n    exports[f] = makeOp({\n                    args: [\"array\", \"array\"],\n                    pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                    body: {args:[\"a\",\"b\"], body:\"a=this_f(b)\", thisVars:[\"this_f\"]},\n                    funcName: f\n                  })\n    exports[f+\"eq\"] = makeOp({\n                      args: [\"array\"],\n                      pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                      body: {args: [\"a\"], body:\"a=this_f(a)\", thisVars:[\"this_f\"]},\n                      rvalue: true,\n                      count: 2,\n                      funcName: f+\"eq\"\n                    })\n  }\n})();\n\nvar math_comm = [\n  \"max\",\n  \"min\",\n  \"atan2\",\n  \"pow\"\n]\n;(function(){\n  for(var i=0; i<math_comm.length; ++i) {\n    var f= math_comm[i]\n    exports[f] = makeOp({\n                  args:[\"array\", \"array\", \"array\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(b,c)\", thisVars:[\"this_f\"]},\n                  funcName: f\n                })\n    exports[f+\"s\"] = makeOp({\n                  args:[\"array\", \"array\", \"scalar\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(b,c)\", thisVars:[\"this_f\"]},\n                  funcName: f+\"s\"\n                  })\n    exports[f+\"eq\"] = makeOp({ args:[\"array\", \"array\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(a,b)\", thisVars:[\"this_f\"]},\n                  rvalue: true,\n                  count: 2,\n                  funcName: f+\"eq\"\n                  })\n    exports[f+\"seq\"] = makeOp({ args:[\"array\", \"scalar\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(a,b)\", thisVars:[\"this_f\"]},\n                  rvalue:true,\n                  count:2,\n                  funcName: f+\"seq\"\n                  })\n  }\n})();\n\nvar math_noncomm = [\n  \"atan2\",\n  \"pow\"\n]\n;(function(){\n  for(var i=0; i<math_noncomm.length; ++i) {\n    var f= math_noncomm[i]\n    exports[f+\"op\"] = makeOp({\n                  args:[\"array\", \"array\", \"array\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(c,b)\", thisVars:[\"this_f\"]},\n                  funcName: f+\"op\"\n                })\n    exports[f+\"ops\"] = makeOp({\n                  args:[\"array\", \"array\", \"scalar\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\",\"c\"], body:\"a=this_f(c,b)\", thisVars:[\"this_f\"]},\n                  funcName: f+\"ops\"\n                  })\n    exports[f+\"opeq\"] = makeOp({ args:[\"array\", \"array\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(b,a)\", thisVars:[\"this_f\"]},\n                  rvalue: true,\n                  count: 2,\n                  funcName: f+\"opeq\"\n                  })\n    exports[f+\"opseq\"] = makeOp({ args:[\"array\", \"scalar\"],\n                  pre: {args:[], body:\"this_f=Math.\"+f, thisVars:[\"this_f\"]},\n                  body: {args:[\"a\",\"b\"], body:\"a=this_f(b,a)\", thisVars:[\"this_f\"]},\n                  rvalue:true,\n                  count:2,\n                  funcName: f+\"opseq\"\n                  })\n  }\n})();\n\nexports.any = compile({\n  args:[\"array\"],\n  pre: EmptyProc,\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:1}], body: \"if(a){return true}\", localVars: [], thisVars: []},\n  post: {args:[], localVars:[], thisVars:[], body:\"return false\"},\n  funcName: \"any\"\n})\n\nexports.all = compile({\n  args:[\"array\"],\n  pre: EmptyProc,\n  body: {args:[{name:\"x\", lvalue:false, rvalue:true, count:1}], body: \"if(!x){return false}\", localVars: [], thisVars: []},\n  post: {args:[], localVars:[], thisVars:[], body:\"return true\"},\n  funcName: \"all\"\n})\n\nexports.sum = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:1}], body: \"this_s+=a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"sum\"\n})\n\nexports.prod = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=1\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:1}], body: \"this_s*=a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"prod\"\n})\n\nexports.norm2squared = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:2}], body: \"this_s+=a*a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"norm2squared\"\n})\n  \nexports.norm2 = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:2}], body: \"this_s+=a*a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return Math.sqrt(this_s)\"},\n  funcName: \"norm2\"\n})\n  \n\nexports.norminf = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:4}], body:\"if(-a>this_s){this_s=-a}else if(a>this_s){this_s=a}\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"norminf\"\n})\n\nexports.norm1 = compile({\n  args:[\"array\"],\n  pre: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"this_s=0\"},\n  body: {args:[{name:\"a\", lvalue:false, rvalue:true, count:3}], body: \"this_s+=a<0?-a:a\", localVars: [], thisVars: [\"this_s\"]},\n  post: {args:[], localVars:[], thisVars:[\"this_s\"], body:\"return this_s\"},\n  funcName: \"norm1\"\n})\n\nexports.sup = compile({\n  args: [ \"array\" ],\n  pre:\n   { body: \"this_h=-Infinity\",\n     args: [],\n     thisVars: [ \"this_h\" ],\n     localVars: [] },\n  body:\n   { body: \"if(_inline_1_arg0_>this_h)this_h=_inline_1_arg0_\",\n     args: [{\"name\":\"_inline_1_arg0_\",\"lvalue\":false,\"rvalue\":true,\"count\":2} ],\n     thisVars: [ \"this_h\" ],\n     localVars: [] },\n  post:\n   { body: \"return this_h\",\n     args: [],\n     thisVars: [ \"this_h\" ],\n     localVars: [] }\n })\n\nexports.inf = compile({\n  args: [ \"array\" ],\n  pre:\n   { body: \"this_h=Infinity\",\n     args: [],\n     thisVars: [ \"this_h\" ],\n     localVars: [] },\n  body:\n   { body: \"if(_inline_1_arg0_<this_h)this_h=_inline_1_arg0_\",\n     args: [{\"name\":\"_inline_1_arg0_\",\"lvalue\":false,\"rvalue\":true,\"count\":2} ],\n     thisVars: [ \"this_h\" ],\n     localVars: [] },\n  post:\n   { body: \"return this_h\",\n     args: [],\n     thisVars: [ \"this_h\" ],\n     localVars: [] }\n })\n\nexports.argmin = compile({\n  args:[\"index\",\"array\",\"shape\"],\n  pre:{\n    body:\"{this_v=Infinity;this_i=_inline_0_arg2_.slice(0)}\",\n    args:[\n      {name:\"_inline_0_arg0_\",lvalue:false,rvalue:false,count:0},\n      {name:\"_inline_0_arg1_\",lvalue:false,rvalue:false,count:0},\n      {name:\"_inline_0_arg2_\",lvalue:false,rvalue:true,count:1}\n      ],\n    thisVars:[\"this_i\",\"this_v\"],\n    localVars:[]},\n  body:{\n    body:\"{if(_inline_1_arg1_<this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}\",\n    args:[\n      {name:\"_inline_1_arg0_\",lvalue:false,rvalue:true,count:2},\n      {name:\"_inline_1_arg1_\",lvalue:false,rvalue:true,count:2}],\n    thisVars:[\"this_i\",\"this_v\"],\n    localVars:[\"_inline_1_k\"]},\n  post:{\n    body:\"{return this_i}\",\n    args:[],\n    thisVars:[\"this_i\"],\n    localVars:[]}\n})\n\nexports.argmax = compile({\n  args:[\"index\",\"array\",\"shape\"],\n  pre:{\n    body:\"{this_v=-Infinity;this_i=_inline_0_arg2_.slice(0)}\",\n    args:[\n      {name:\"_inline_0_arg0_\",lvalue:false,rvalue:false,count:0},\n      {name:\"_inline_0_arg1_\",lvalue:false,rvalue:false,count:0},\n      {name:\"_inline_0_arg2_\",lvalue:false,rvalue:true,count:1}\n      ],\n    thisVars:[\"this_i\",\"this_v\"],\n    localVars:[]},\n  body:{\n    body:\"{if(_inline_1_arg1_>this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}\",\n    args:[\n      {name:\"_inline_1_arg0_\",lvalue:false,rvalue:true,count:2},\n      {name:\"_inline_1_arg1_\",lvalue:false,rvalue:true,count:2}],\n    thisVars:[\"this_i\",\"this_v\"],\n    localVars:[\"_inline_1_k\"]},\n  post:{\n    body:\"{return this_i}\",\n    args:[],\n    thisVars:[\"this_i\"],\n    localVars:[]}\n})  \n\nexports.random = makeOp({\n  args: [\"array\"],\n  pre: {args:[], body:\"this_f=Math.random\", thisVars:[\"this_f\"]},\n  body: {args: [\"a\"], body:\"a=this_f()\", thisVars:[\"this_f\"]},\n  funcName: \"random\"\n})\n\nexports.assign = makeOp({\n  args:[\"array\", \"array\"],\n  body: {args:[\"a\", \"b\"], body:\"a=b\"},\n  funcName: \"assign\" })\n\nexports.assigns = makeOp({\n  args:[\"array\", \"scalar\"],\n  body: {args:[\"a\", \"b\"], body:\"a=b\"},\n  funcName: \"assigns\" })\n\n\nexports.equals = compile({\n  args:[\"array\", \"array\"],\n  pre: EmptyProc,\n  body: {args:[{name:\"x\", lvalue:false, rvalue:true, count:1},\n               {name:\"y\", lvalue:false, rvalue:true, count:1}], \n        body: \"if(x!==y){return false}\", \n        localVars: [], \n        thisVars: []},\n  post: {args:[], localVars:[], thisVars:[], body:\"return true\"},\n  funcName: \"equals\"\n})\n\n\n","\"use strict\"\n\nvar createThunk = require(\"./lib/thunk.js\")\n\nfunction Procedure() {\n  this.argTypes = []\n  this.shimArgs = []\n  this.arrayArgs = []\n  this.arrayBlockIndices = []\n  this.scalarArgs = []\n  this.offsetArgs = []\n  this.offsetArgIndex = []\n  this.indexArgs = []\n  this.shapeArgs = []\n  this.funcName = \"\"\n  this.pre = null\n  this.body = null\n  this.post = null\n  this.debug = false\n}\n\nfunction compileCwise(user_args) {\n  //Create procedure\n  var proc = new Procedure()\n  \n  //Parse blocks\n  proc.pre    = user_args.pre\n  proc.body   = user_args.body\n  proc.post   = user_args.post\n\n  //Parse arguments\n  var proc_args = user_args.args.slice(0)\n  proc.argTypes = proc_args\n  for(var i=0; i<proc_args.length; ++i) {\n    var arg_type = proc_args[i]\n    if(arg_type === \"array\" || (typeof arg_type === \"object\" && arg_type.blockIndices)) {\n      proc.argTypes[i] = \"array\"\n      proc.arrayArgs.push(i)\n      proc.arrayBlockIndices.push(arg_type.blockIndices ? arg_type.blockIndices : 0)\n      proc.shimArgs.push(\"array\" + i)\n      if(i < proc.pre.args.length && proc.pre.args[i].count>0) {\n        throw new Error(\"cwise: pre() block may not reference array args\")\n      }\n      if(i < proc.post.args.length && proc.post.args[i].count>0) {\n        throw new Error(\"cwise: post() block may not reference array args\")\n      }\n    } else if(arg_type === \"scalar\") {\n      proc.scalarArgs.push(i)\n      proc.shimArgs.push(\"scalar\" + i)\n    } else if(arg_type === \"index\") {\n      proc.indexArgs.push(i)\n      if(i < proc.pre.args.length && proc.pre.args[i].count > 0) {\n        throw new Error(\"cwise: pre() block may not reference array index\")\n      }\n      if(i < proc.body.args.length && proc.body.args[i].lvalue) {\n        throw new Error(\"cwise: body() block may not write to array index\")\n      }\n      if(i < proc.post.args.length && proc.post.args[i].count > 0) {\n        throw new Error(\"cwise: post() block may not reference array index\")\n      }\n    } else if(arg_type === \"shape\") {\n      proc.shapeArgs.push(i)\n      if(i < proc.pre.args.length && proc.pre.args[i].lvalue) {\n        throw new Error(\"cwise: pre() block may not write to array shape\")\n      }\n      if(i < proc.body.args.length && proc.body.args[i].lvalue) {\n        throw new Error(\"cwise: body() block may not write to array shape\")\n      }\n      if(i < proc.post.args.length && proc.post.args[i].lvalue) {\n        throw new Error(\"cwise: post() block may not write to array shape\")\n      }\n    } else if(typeof arg_type === \"object\" && arg_type.offset) {\n      proc.argTypes[i] = \"offset\"\n      proc.offsetArgs.push({ array: arg_type.array, offset:arg_type.offset })\n      proc.offsetArgIndex.push(i)\n    } else {\n      throw new Error(\"cwise: Unknown argument type \" + proc_args[i])\n    }\n  }\n  \n  //Make sure at least one array argument was specified\n  if(proc.arrayArgs.length <= 0) {\n    throw new Error(\"cwise: No array arguments specified\")\n  }\n  \n  //Make sure arguments are correct\n  if(proc.pre.args.length > proc_args.length) {\n    throw new Error(\"cwise: Too many arguments in pre() block\")\n  }\n  if(proc.body.args.length > proc_args.length) {\n    throw new Error(\"cwise: Too many arguments in body() block\")\n  }\n  if(proc.post.args.length > proc_args.length) {\n    throw new Error(\"cwise: Too many arguments in post() block\")\n  }\n\n  //Check debug flag\n  proc.debug = !!user_args.printCode || !!user_args.debug\n  \n  //Retrieve name\n  proc.funcName = user_args.funcName || \"cwise\"\n  \n  //Read in block size\n  proc.blockSize = user_args.blockSize || 64\n\n  return createThunk(proc)\n}\n\nmodule.exports = compileCwise\n","\"use strict\"\n\n// The function below is called when constructing a cwise function object, and does the following:\n// A function object is constructed which accepts as argument a compilation function and returns another function.\n// It is this other function that is eventually returned by createThunk, and this function is the one that actually\n// checks whether a certain pattern of arguments has already been used before and compiles new loops as needed.\n// The compilation passed to the first function object is used for compiling new functions.\n// Once this function object is created, it is called with compile as argument, where the first argument of compile\n// is bound to \"proc\" (essentially containing a preprocessed version of the user arguments to cwise).\n// So createThunk roughly works like this:\n// function createThunk(proc) {\n//   var thunk = function(compileBound) {\n//     var CACHED = {}\n//     return function(arrays and scalars) {\n//       if (dtype and order of arrays in CACHED) {\n//         var func = CACHED[dtype and order of arrays]\n//       } else {\n//         var func = CACHED[dtype and order of arrays] = compileBound(dtype and order of arrays)\n//       }\n//       return func(arrays and scalars)\n//     }\n//   }\n//   return thunk(compile.bind1(proc))\n// }\n\nvar compile = require(\"./compile.js\")\n\nfunction createThunk(proc) {\n  var code = [\"'use strict'\", \"var CACHED={}\"]\n  var vars = []\n  var thunkName = proc.funcName + \"_cwise_thunk\"\n  \n  //Build thunk\n  code.push([\"return function \", thunkName, \"(\", proc.shimArgs.join(\",\"), \"){\"].join(\"\"))\n  var typesig = []\n  var string_typesig = []\n  var proc_args = [[\"array\",proc.arrayArgs[0],\".shape.slice(\", // Slice shape so that we only retain the shape over which we iterate (which gets passed to the cwise operator as SS).\n                    Math.max(0,proc.arrayBlockIndices[0]),proc.arrayBlockIndices[0]<0?(\",\"+proc.arrayBlockIndices[0]+\")\"):\")\"].join(\"\")]\n  var shapeLengthConditions = [], shapeConditions = []\n  // Process array arguments\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\n    var j = proc.arrayArgs[i]\n    vars.push([\"t\", j, \"=array\", j, \".dtype,\",\n               \"r\", j, \"=array\", j, \".order\"].join(\"\"))\n    typesig.push(\"t\" + j)\n    typesig.push(\"r\" + j)\n    string_typesig.push(\"t\"+j)\n    string_typesig.push(\"r\"+j+\".join()\")\n    proc_args.push(\"array\" + j + \".data\")\n    proc_args.push(\"array\" + j + \".stride\")\n    proc_args.push(\"array\" + j + \".offset|0\")\n    if (i>0) { // Gather conditions to check for shape equality (ignoring block indices)\n      shapeLengthConditions.push(\"array\" + proc.arrayArgs[0] + \".shape.length===array\" + j + \".shape.length+\" + (Math.abs(proc.arrayBlockIndices[0])-Math.abs(proc.arrayBlockIndices[i])))\n      shapeConditions.push(\"array\" + proc.arrayArgs[0] + \".shape[shapeIndex+\" + Math.max(0,proc.arrayBlockIndices[0]) + \"]===array\" + j + \".shape[shapeIndex+\" + Math.max(0,proc.arrayBlockIndices[i]) + \"]\")\n    }\n  }\n  // Check for shape equality\n  if (proc.arrayArgs.length > 1) {\n    code.push(\"if (!(\" + shapeLengthConditions.join(\" && \") + \")) throw new Error('cwise: Arrays do not all have the same dimensionality!')\")\n    code.push(\"for(var shapeIndex=array\" + proc.arrayArgs[0] + \".shape.length-\" + Math.abs(proc.arrayBlockIndices[0]) + \"; shapeIndex-->0;) {\")\n    code.push(\"if (!(\" + shapeConditions.join(\" && \") + \")) throw new Error('cwise: Arrays do not all have the same shape!')\")\n    code.push(\"}\")\n  }\n  // Process scalar arguments\n  for(var i=0; i<proc.scalarArgs.length; ++i) {\n    proc_args.push(\"scalar\" + proc.scalarArgs[i])\n  }\n  // Check for cached function (and if not present, generate it)\n  vars.push([\"type=[\", string_typesig.join(\",\"), \"].join()\"].join(\"\"))\n  vars.push(\"proc=CACHED[type]\")\n  code.push(\"var \" + vars.join(\",\"))\n  \n  code.push([\"if(!proc){\",\n             \"CACHED[type]=proc=compile([\", typesig.join(\",\"), \"])}\",\n             \"return proc(\", proc_args.join(\",\"), \")}\"].join(\"\"))\n\n  if(proc.debug) {\n    console.log(\"-----Generated thunk:\\n\" + code.join(\"\\n\") + \"\\n----------\")\n  }\n  \n  //Compile thunk\n  var thunk = new Function(\"compile\", code.join(\"\\n\"))\n  return thunk(compile.bind(undefined, proc))\n}\n\nmodule.exports = createThunk\n","\"use strict\"\n\nvar uniq = require(\"uniq\")\n\n// This function generates very simple loops analogous to how you typically traverse arrays (the outermost loop corresponds to the slowest changing index, the innermost loop to the fastest changing index)\n// TODO: If two arrays have the same strides (and offsets) there is potential for decreasing the number of \"pointers\" and related variables. The drawback is that the type signature would become more specific and that there would thus be less potential for caching, but it might still be worth it, especially when dealing with large numbers of arguments.\nfunction innerFill(order, proc, body) {\n  var dimension = order.length\n    , nargs = proc.arrayArgs.length\n    , has_index = proc.indexArgs.length>0\n    , code = []\n    , vars = []\n    , idx=0, pidx=0, i, j\n  for(i=0; i<dimension; ++i) { // Iteration variables\n    vars.push([\"i\",i,\"=0\"].join(\"\"))\n  }\n  //Compute scan deltas\n  for(j=0; j<nargs; ++j) {\n    for(i=0; i<dimension; ++i) {\n      pidx = idx\n      idx = order[i]\n      if(i === 0) { // The innermost/fastest dimension's delta is simply its stride\n        vars.push([\"d\",j,\"s\",i,\"=t\",j,\"p\",idx].join(\"\"))\n      } else { // For other dimensions the delta is basically the stride minus something which essentially \"rewinds\" the previous (more inner) dimension\n        vars.push([\"d\",j,\"s\",i,\"=(t\",j,\"p\",idx,\"-s\",pidx,\"*t\",j,\"p\",pidx,\")\"].join(\"\"))\n      }\n    }\n  }\n  if (vars.length > 0) {\n    code.push(\"var \" + vars.join(\",\"))\n  }  \n  //Scan loop\n  for(i=dimension-1; i>=0; --i) { // Start at largest stride and work your way inwards\n    idx = order[i]\n    code.push([\"for(i\",i,\"=0;i\",i,\"<s\",idx,\";++i\",i,\"){\"].join(\"\"))\n  }\n  //Push body of inner loop\n  code.push(body)\n  //Advance scan pointers\n  for(i=0; i<dimension; ++i) {\n    pidx = idx\n    idx = order[i]\n    for(j=0; j<nargs; ++j) {\n      code.push([\"p\",j,\"+=d\",j,\"s\",i].join(\"\"))\n    }\n    if(has_index) {\n      if(i > 0) {\n        code.push([\"index[\",pidx,\"]-=s\",pidx].join(\"\"))\n      }\n      code.push([\"++index[\",idx,\"]\"].join(\"\"))\n    }\n    code.push(\"}\")\n  }\n  return code.join(\"\\n\")\n}\n\n// Generate \"outer\" loops that loop over blocks of data, applying \"inner\" loops to the blocks by manipulating the local variables in such a way that the inner loop only \"sees\" the current block.\n// TODO: If this is used, then the previous declaration (done by generateCwiseOp) of s* is essentially unnecessary.\n//       I believe the s* are not used elsewhere (in particular, I don't think they're used in the pre/post parts and \"shape\" is defined independently), so it would be possible to make defining the s* dependent on what loop method is being used.\nfunction outerFill(matched, order, proc, body) {\n  var dimension = order.length\n    , nargs = proc.arrayArgs.length\n    , blockSize = proc.blockSize\n    , has_index = proc.indexArgs.length > 0\n    , code = []\n  for(var i=0; i<nargs; ++i) {\n    code.push([\"var offset\",i,\"=p\",i].join(\"\"))\n  }\n  //Generate loops for unmatched dimensions\n  // The order in which these dimensions are traversed is fairly arbitrary (from small stride to large stride, for the first argument)\n  // TODO: It would be nice if the order in which these loops are placed would also be somehow \"optimal\" (at the very least we should check that it really doesn't hurt us if they're not).\n  for(var i=matched; i<dimension; ++i) {\n    code.push([\"for(var j\"+i+\"=SS[\", order[i], \"]|0;j\", i, \">0;){\"].join(\"\")) // Iterate back to front\n    code.push([\"if(j\",i,\"<\",blockSize,\"){\"].join(\"\")) // Either decrease j by blockSize (s = blockSize), or set it to zero (after setting s = j).\n    code.push([\"s\",order[i],\"=j\",i].join(\"\"))\n    code.push([\"j\",i,\"=0\"].join(\"\"))\n    code.push([\"}else{s\",order[i],\"=\",blockSize].join(\"\"))\n    code.push([\"j\",i,\"-=\",blockSize,\"}\"].join(\"\"))\n    if(has_index) {\n      code.push([\"index[\",order[i],\"]=j\",i].join(\"\"))\n    }\n  }\n  for(var i=0; i<nargs; ++i) {\n    var indexStr = [\"offset\"+i]\n    for(var j=matched; j<dimension; ++j) {\n      indexStr.push([\"j\",j,\"*t\",i,\"p\",order[j]].join(\"\"))\n    }\n    code.push([\"p\",i,\"=(\",indexStr.join(\"+\"),\")\"].join(\"\"))\n  }\n  code.push(innerFill(order, proc, body))\n  for(var i=matched; i<dimension; ++i) {\n    code.push(\"}\")\n  }\n  return code.join(\"\\n\")\n}\n\n//Count the number of compatible inner orders\n// This is the length of the longest common prefix of the arrays in orders.\n// Each array in orders lists the dimensions of the correspond ndarray in order of increasing stride.\n// This is thus the maximum number of dimensions that can be efficiently traversed by simple nested loops for all arrays.\nfunction countMatches(orders) {\n  var matched = 0, dimension = orders[0].length\n  while(matched < dimension) {\n    for(var j=1; j<orders.length; ++j) {\n      if(orders[j][matched] !== orders[0][matched]) {\n        return matched\n      }\n    }\n    ++matched\n  }\n  return matched\n}\n\n//Processes a block according to the given data types\n// Replaces variable names by different ones, either \"local\" ones (that are then ferried in and out of the given array) or ones matching the arguments that the function performing the ultimate loop will accept.\nfunction processBlock(block, proc, dtypes) {\n  var code = block.body\n  var pre = []\n  var post = []\n  for(var i=0; i<block.args.length; ++i) {\n    var carg = block.args[i]\n    if(carg.count <= 0) {\n      continue\n    }\n    var re = new RegExp(carg.name, \"g\")\n    var ptrStr = \"\"\n    var arrNum = proc.arrayArgs.indexOf(i)\n    switch(proc.argTypes[i]) {\n      case \"offset\":\n        var offArgIndex = proc.offsetArgIndex.indexOf(i)\n        var offArg = proc.offsetArgs[offArgIndex]\n        arrNum = offArg.array\n        ptrStr = \"+q\" + offArgIndex // Adds offset to the \"pointer\" in the array\n      case \"array\":\n        ptrStr = \"p\" + arrNum + ptrStr\n        var localStr = \"l\" + i\n        var arrStr = \"a\" + arrNum\n        if (proc.arrayBlockIndices[arrNum] === 0) { // Argument to body is just a single value from this array\n          if(carg.count === 1) { // Argument/array used only once(?)\n            if(dtypes[arrNum] === \"generic\") {\n              if(carg.lvalue) {\n                pre.push([\"var \", localStr, \"=\", arrStr, \".get(\", ptrStr, \")\"].join(\"\")) // Is this necessary if the argument is ONLY used as an lvalue? (keep in mind that we can have a += something, so we would actually need to check carg.rvalue)\n                code = code.replace(re, localStr)\n                post.push([arrStr, \".set(\", ptrStr, \",\", localStr,\")\"].join(\"\"))\n              } else {\n                code = code.replace(re, [arrStr, \".get(\", ptrStr, \")\"].join(\"\"))\n              }\n            } else {\n              code = code.replace(re, [arrStr, \"[\", ptrStr, \"]\"].join(\"\"))\n            }\n          } else if(dtypes[arrNum] === \"generic\") {\n            pre.push([\"var \", localStr, \"=\", arrStr, \".get(\", ptrStr, \")\"].join(\"\")) // TODO: Could we optimize by checking for carg.rvalue?\n            code = code.replace(re, localStr)\n            if(carg.lvalue) {\n              post.push([arrStr, \".set(\", ptrStr, \",\", localStr,\")\"].join(\"\"))\n            }\n          } else {\n            pre.push([\"var \", localStr, \"=\", arrStr, \"[\", ptrStr, \"]\"].join(\"\")) // TODO: Could we optimize by checking for carg.rvalue?\n            code = code.replace(re, localStr)\n            if(carg.lvalue) {\n              post.push([arrStr, \"[\", ptrStr, \"]=\", localStr].join(\"\"))\n            }\n          }\n        } else { // Argument to body is a \"block\"\n          var reStrArr = [carg.name], ptrStrArr = [ptrStr]\n          for(var j=0; j<Math.abs(proc.arrayBlockIndices[arrNum]); j++) {\n            reStrArr.push(\"\\\\s*\\\\[([^\\\\]]+)\\\\]\")\n            ptrStrArr.push(\"$\" + (j+1) + \"*t\" + arrNum + \"b\" + j) // Matched index times stride\n          }\n          re = new RegExp(reStrArr.join(\"\"), \"g\")\n          ptrStr = ptrStrArr.join(\"+\")\n          if(dtypes[arrNum] === \"generic\") {\n            /*if(carg.lvalue) {\n              pre.push([\"var \", localStr, \"=\", arrStr, \".get(\", ptrStr, \")\"].join(\"\")) // Is this necessary if the argument is ONLY used as an lvalue? (keep in mind that we can have a += something, so we would actually need to check carg.rvalue)\n              code = code.replace(re, localStr)\n              post.push([arrStr, \".set(\", ptrStr, \",\", localStr,\")\"].join(\"\"))\n            } else {\n              code = code.replace(re, [arrStr, \".get(\", ptrStr, \")\"].join(\"\"))\n            }*/\n            throw new Error(\"cwise: Generic arrays not supported in combination with blocks!\")\n          } else {\n            // This does not produce any local variables, even if variables are used multiple times. It would be possible to do so, but it would complicate things quite a bit.\n            code = code.replace(re, [arrStr, \"[\", ptrStr, \"]\"].join(\"\"))\n          }\n        }\n      break\n      case \"scalar\":\n        code = code.replace(re, \"Y\" + proc.scalarArgs.indexOf(i))\n      break\n      case \"index\":\n        code = code.replace(re, \"index\")\n      break\n      case \"shape\":\n        code = code.replace(re, \"shape\")\n      break\n    }\n  }\n  return [pre.join(\"\\n\"), code, post.join(\"\\n\")].join(\"\\n\").trim()\n}\n\nfunction typeSummary(dtypes) {\n  var summary = new Array(dtypes.length)\n  var allEqual = true\n  for(var i=0; i<dtypes.length; ++i) {\n    var t = dtypes[i]\n    var digits = t.match(/\\d+/)\n    if(!digits) {\n      digits = \"\"\n    } else {\n      digits = digits[0]\n    }\n    if(t.charAt(0) === 0) {\n      summary[i] = \"u\" + t.charAt(1) + digits\n    } else {\n      summary[i] = t.charAt(0) + digits\n    }\n    if(i > 0) {\n      allEqual = allEqual && summary[i] === summary[i-1]\n    }\n  }\n  if(allEqual) {\n    return summary[0]\n  }\n  return summary.join(\"\")\n}\n\n//Generates a cwise operator\nfunction generateCWiseOp(proc, typesig) {\n\n  //Compute dimension\n  // Arrays get put first in typesig, and there are two entries per array (dtype and order), so this gets the number of dimensions in the first array arg.\n  var dimension = (typesig[1].length - Math.abs(proc.arrayBlockIndices[0]))|0\n  var orders = new Array(proc.arrayArgs.length)\n  var dtypes = new Array(proc.arrayArgs.length)\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\n    dtypes[i] = typesig[2*i]\n    orders[i] = typesig[2*i+1]\n  }\n  \n  //Determine where block and loop indices start and end\n  var blockBegin = [], blockEnd = [] // These indices are exposed as blocks\n  var loopBegin = [], loopEnd = [] // These indices are iterated over\n  var loopOrders = [] // orders restricted to the loop indices\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\n    if (proc.arrayBlockIndices[i]<0) {\n      loopBegin.push(0)\n      loopEnd.push(dimension)\n      blockBegin.push(dimension)\n      blockEnd.push(dimension+proc.arrayBlockIndices[i])\n    } else {\n      loopBegin.push(proc.arrayBlockIndices[i]) // Non-negative\n      loopEnd.push(proc.arrayBlockIndices[i]+dimension)\n      blockBegin.push(0)\n      blockEnd.push(proc.arrayBlockIndices[i])\n    }\n    var newOrder = []\n    for(var j=0; j<orders[i].length; j++) {\n      if (loopBegin[i]<=orders[i][j] && orders[i][j]<loopEnd[i]) {\n        newOrder.push(orders[i][j]-loopBegin[i]) // If this is a loop index, put it in newOrder, subtracting loopBegin, to make sure that all loopOrders are using a common set of indices.\n      }\n    }\n    loopOrders.push(newOrder)\n  }\n\n  //First create arguments for procedure\n  var arglist = [\"SS\"] // SS is the overall shape over which we iterate\n  var code = [\"'use strict'\"]\n  var vars = []\n  \n  for(var j=0; j<dimension; ++j) {\n    vars.push([\"s\", j, \"=SS[\", j, \"]\"].join(\"\")) // The limits for each dimension.\n  }\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\n    arglist.push(\"a\"+i) // Actual data array\n    arglist.push(\"t\"+i) // Strides\n    arglist.push(\"p\"+i) // Offset in the array at which the data starts (also used for iterating over the data)\n    \n    for(var j=0; j<dimension; ++j) { // Unpack the strides into vars for looping\n      vars.push([\"t\",i,\"p\",j,\"=t\",i,\"[\",loopBegin[i]+j,\"]\"].join(\"\"))\n    }\n    \n    for(var j=0; j<Math.abs(proc.arrayBlockIndices[i]); ++j) { // Unpack the strides into vars for block iteration\n      vars.push([\"t\",i,\"b\",j,\"=t\",i,\"[\",blockBegin[i]+j,\"]\"].join(\"\"))\n    }\n  }\n  for(var i=0; i<proc.scalarArgs.length; ++i) {\n    arglist.push(\"Y\" + i)\n  }\n  if(proc.shapeArgs.length > 0) {\n    vars.push(\"shape=SS.slice(0)\") // Makes the shape over which we iterate available to the user defined functions (so you can use width/height for example)\n  }\n  if(proc.indexArgs.length > 0) {\n    // Prepare an array to keep track of the (logical) indices, initialized to dimension zeroes.\n    var zeros = new Array(dimension)\n    for(var i=0; i<dimension; ++i) {\n      zeros[i] = \"0\"\n    }\n    vars.push([\"index=[\", zeros.join(\",\"), \"]\"].join(\"\"))\n  }\n  for(var i=0; i<proc.offsetArgs.length; ++i) { // Offset arguments used for stencil operations\n    var off_arg = proc.offsetArgs[i]\n    var init_string = []\n    for(var j=0; j<off_arg.offset.length; ++j) {\n      if(off_arg.offset[j] === 0) {\n        continue\n      } else if(off_arg.offset[j] === 1) {\n        init_string.push([\"t\", off_arg.array, \"p\", j].join(\"\"))      \n      } else {\n        init_string.push([off_arg.offset[j], \"*t\", off_arg.array, \"p\", j].join(\"\"))\n      }\n    }\n    if(init_string.length === 0) {\n      vars.push(\"q\" + i + \"=0\")\n    } else {\n      vars.push([\"q\", i, \"=\", init_string.join(\"+\")].join(\"\"))\n    }\n  }\n\n  //Prepare this variables\n  var thisVars = uniq([].concat(proc.pre.thisVars)\n                      .concat(proc.body.thisVars)\n                      .concat(proc.post.thisVars))\n  vars = vars.concat(thisVars)\n  if (vars.length > 0) {\n    code.push(\"var \" + vars.join(\",\"))\n  }\n  for(var i=0; i<proc.arrayArgs.length; ++i) {\n    code.push(\"p\"+i+\"|=0\")\n  }\n  \n  //Inline prelude\n  if(proc.pre.body.length > 3) {\n    code.push(processBlock(proc.pre, proc, dtypes))\n  }\n\n  //Process body\n  var body = processBlock(proc.body, proc, dtypes)\n  var matched = countMatches(loopOrders)\n  if(matched < dimension) {\n    code.push(outerFill(matched, loopOrders[0], proc, body)) // TODO: Rather than passing loopOrders[0], it might be interesting to look at passing an order that represents the majority of the arguments for example.\n  } else {\n    code.push(innerFill(loopOrders[0], proc, body))\n  }\n\n  //Inline epilog\n  if(proc.post.body.length > 3) {\n    code.push(processBlock(proc.post, proc, dtypes))\n  }\n  \n  if(proc.debug) {\n    console.log(\"-----Generated cwise routine for \", typesig, \":\\n\" + code.join(\"\\n\") + \"\\n----------\")\n  }\n  \n  var loopName = [(proc.funcName||\"unnamed\"), \"_cwise_loop_\", orders[0].join(\"s\"),\"m\",matched,typeSummary(dtypes)].join(\"\")\n  var f = new Function([\"function \",loopName,\"(\", arglist.join(\",\"),\"){\", code.join(\"\\n\"),\"} return \", loopName].join(\"\"))\n  return f()\n}\nmodule.exports = generateCWiseOp\n","\"use strict\"\n\nfunction unique_pred(list, compare) {\n  var ptr = 1\n    , len = list.length\n    , a=list[0], b=list[0]\n  for(var i=1; i<len; ++i) {\n    b = a\n    a = list[i]\n    if(compare(a, b)) {\n      if(i === ptr) {\n        ptr++\n        continue\n      }\n      list[ptr++] = a\n    }\n  }\n  list.length = ptr\n  return list\n}\n\nfunction unique_eq(list) {\n  var ptr = 1\n    , len = list.length\n    , a=list[0], b = list[0]\n  for(var i=1; i<len; ++i, b=a) {\n    b = a\n    a = list[i]\n    if(a !== b) {\n      if(i === ptr) {\n        ptr++\n        continue\n      }\n      list[ptr++] = a\n    }\n  }\n  list.length = ptr\n  return list\n}\n\nfunction unique(list, compare, sorted) {\n  if(list.length === 0) {\n    return list\n  }\n  if(compare) {\n    if(!sorted) {\n      list.sort(compare)\n    }\n    return unique_pred(list, compare)\n  }\n  if(!sorted) {\n    list.sort()\n  }\n  return unique_eq(list)\n}\n\nmodule.exports = unique\n",null,"const fixedFracBits = 14\n\nconst filterValue = ( x: number, a: 2 | 3 ) => {\n\tif ( x <= -a || x >= a ) return 0\n\n\t// appears to do nothing?\n\t// if ( x > -1.19209290e-07 && x < 1.19209290e-07 ) return 1\n\n\tconst xPi = x * Math.PI\n\n\treturn ( Math.sin( xPi ) / xPi ) * Math.sin( xPi / a ) / ( xPi / a )\n}\n\nconst toFixedPoint = ( value: number ) =>\nMath.round( value * ( ( 1 << fixedFracBits ) - 1 ) )\n\nexport const filters = ( srcSize: number, destSize: number, scale: number, offset: number, use2: boolean ) => {\n\tconst a = use2 ? 2 : 3\n\tconst scaleInverted = 1 / scale\n\tconst scaleClamped = Math.min( 1, scale ) // For upscale\n\n\t// Filter window (averaging interval), scaled to src image\n\tconst srcWindow = a / scaleClamped\n\n\tconst maxFilterElementSize = Math.floor( ( srcWindow + 1 ) * 2 )\n\tconst packedFilter = new Int16Array( ( maxFilterElementSize + 2 ) * destSize )\n\tlet packedFilterPtr = 0\n\n\t// For each destination pixel calculate source range and built filter values\n\tfor ( let destPixel = 0; destPixel < destSize; destPixel++ ) {\n\n\t\t// Scaling should be done relative to central pixel point\n\t\tconst sourcePixel = ( destPixel + 0.5 ) * scaleInverted + offset\n\t\tconst sourceFirst = Math.max( 0, Math.floor( sourcePixel - srcWindow ) )\n\t\tconst sourceLast = Math.min( srcSize - 1, Math.ceil( sourcePixel + srcWindow ) )\n\n\t\tconst filterElementSize = sourceLast - sourceFirst + 1\n\t\tconst floatFilter = new Float32Array( filterElementSize )\n\t\tconst fxpFilter = new Int16Array( filterElementSize )\n\n\t\tlet total = 0\n\n\t\t// Fill filter values for calculated range\n\t\tlet index = 0\n\t\tfor ( let pixel = sourceFirst; pixel <= sourceLast; pixel++ ) {\n\t\t\tconst floatValue = filterValue( ( ( pixel + 0.5 ) - sourcePixel ) * scaleClamped, a )\n\n\t\t\ttotal += floatValue\n\t\t\tfloatFilter[ index ] = floatValue\n\n\t\t\tindex++\n\t\t}\n\n\t\t// Normalize filter, convert to fixed point and accumulate conversion error\n\t\tlet filterTotal = 0\n\n\t\tfor ( let index = 0; index < floatFilter.length; index++ ) {\n\t\t\tconst filterValue = floatFilter[ index ] / total\n\n\t\t\tfilterTotal += filterValue\n\t\t\tfxpFilter[ index ] = toFixedPoint( filterValue )\n\t\t}\n\n\t\t// Compensate normalization error, to minimize brightness drift\n\t\tfxpFilter[ destSize >> 1 ] += toFixedPoint( 1 - filterTotal )\n\n\t\t//\n\t\t// Now pack filter to useable form\n\t\t//\n\t\t// 1. Trim heading and tailing zero values, and compensate shitf/length\n\t\t// 2. Put all to single array in this format:\n\t\t//\n\t\t//    [ pos shift, data length, value1, value2, value3, ... ]\n\t\t//\n\t\tlet leftNotEmpty = 0\n\t\twhile ( leftNotEmpty < fxpFilter.length && fxpFilter[ leftNotEmpty ] === 0 ) {\n\t\t\tleftNotEmpty++\n\t\t}\n\n\t\tlet rightNotEmpty = fxpFilter.length - 1\n\t\twhile ( rightNotEmpty > 0 && fxpFilter[ rightNotEmpty ] === 0 ) {\n\t\t\trightNotEmpty--\n\t\t}\n\n\t\tconst filterShift = sourceFirst + leftNotEmpty\n\t\tconst filterSize = rightNotEmpty - leftNotEmpty + 1\n\n\t\tpackedFilter[ packedFilterPtr++ ] = filterShift // shift\n\t\tpackedFilter[ packedFilterPtr++ ] = filterSize // size\n\n\t\tpackedFilter.set( fxpFilter.subarray( leftNotEmpty, rightNotEmpty + 1 ), packedFilterPtr )\n\t\tpackedFilterPtr += filterSize\n\t}\n\n\treturn packedFilter\n}\n","import type { NdArray } from 'ndarray';\n\nconst fixedFracBits = 14;\n\nconst clamp = (v: number): number => v < 0 ? 0 : (v > 255 ? 255 : v);\n\nexport const convolve = (src: NdArray, dst: NdArray, filters: Int16Array) => {\n\tconst [_, srcHeight] = src.shape;\n\tconst [dstWidth] = dst.shape;\n\n\t// For each row\n\tfor (let srcY = 0; srcY < srcHeight; srcY++) {\n\t\tconst dstY = srcY;\n\n\t\t// Apply precomputed filters to each destination row point\n\t\tlet filterPtr = 0;\n\t\tfor (let dstX = 0; dstX < dstWidth; dstX++) {\n\t\t\t// Get the filter that determines the current output pixel.\n\t\t\tlet srcX = filters[filterPtr++];\n\n\t\t\tlet r = 0;\n\t\t\tlet g = 0;\n\t\t\tlet b = 0;\n\t\t\tlet a = 0;\n\n\t\t\t// Apply the filter to the row to get the destination pixel r, g, b, a\n\t\t\tfor (let filterSize = filters[filterPtr++]; filterSize > 0; filterSize--) {\n\t\t\t\tconst filterValue = filters[filterPtr++];\n\n\t\t\t\tr = ( r + filterValue * src.get(srcX, srcY, 0) );\n\t\t\t\tg = ( g + filterValue * src.get(srcX, srcY, 1) );\n\t\t\t\tb = ( b + filterValue * src.get(srcX, srcY, 2) );\n\t\t\t\ta = ( a + filterValue * src.get(srcX, srcY, 3) );\n\n\t\t\t\tsrcX++;\n\t\t\t}\n\n\t\t\t// Bring this value back in range. All of the filter scaling factors\n\t\t\t// are in fixed point with fixedFracBits bits of fractional part.\n\t\t\t//\n\t\t\t// (!) Add 1/2 of value before clamping to get proper rounding. In other\n\t\t\t// case brightness loss will be noticeable if you resize image with white\n\t\t\t// border and place it on white background.\n\t\t\tdst.set(dstX, dstY, 0, clamp( ( r + ( 1 << 13 ) ) >> fixedFracBits ) );\n\t\t\tdst.set(dstX, dstY, 1, clamp( ( g + ( 1 << 13 ) ) >> fixedFracBits ) );\n\t\t\tdst.set(dstX, dstY, 2, clamp( ( b + ( 1 << 13 ) ) >> fixedFracBits ) );\n\t\t\tdst.set(dstX, dstY, 3, clamp( ( a + ( 1 << 13 ) ) >> fixedFracBits ) );\n\t\t}\n\t}\n}\n","import ndarray, { NdArray } from 'ndarray';\nimport { filters } from '../vendor/filters';\nimport { convolve } from './convolve';\n\nenum Method {\n\tLANCZOS_3 = 3,\n\tLANCZOS_2 = 2,\n}\n\nfunction resize(src: NdArray, dst: NdArray, method: Method): void {\n\tconst [srcWidth, srcHeight] = src.shape;\n\tconst [dstWidth, dstHeight] = dst.shape;\n\n\tconst ratioX = dstWidth / srcWidth;\n\tconst ratioY = dstHeight / srcHeight;\n\n\tconst filtersX = filters(srcWidth, dstWidth, ratioX, 0, method === Method.LANCZOS_2);\n\tconst filtersY = filters(srcHeight, dstHeight, ratioY, 0, method === Method.LANCZOS_2);\n\n\tconst tmp = ndarray(new Uint8Array(dstWidth * srcHeight * 4), [srcHeight, dstWidth, 4]);\n\tconst tmpTranspose = tmp.transpose(1, 0);\n\tconst dstTranspose = dst.transpose(1, 0);\n\n\tconvolve(src, tmpTranspose, filtersX);\n\tconvolve(tmp, dstTranspose, filtersY);\n}\n\nexport function lanczos3(src: NdArray, dst: NdArray): void {\n\tresize(src, dst, Method.LANCZOS_3);\n}\n\nexport function lanczos2(src: NdArray, dst: NdArray): void {\n\tresize(src, dst, Method.LANCZOS_2);\n}\n"],"names":["createTransform","name","fn","Object","defineProperty","value","rewriteTexture","source","target","srcImage","getImage","pixels","getPixels","getMimeType","i","shape","j","dstImage","savePixels","setImage","setMimeType","getGLPrimitiveCount","prim","indices","getIndices","position","getAttribute","getMode","Primitive","Mode","POINTS","getCount","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","Error","SetMap","_map","Map","size","has","k","add","v","entry","this","get","Set","set","keys","CENTER_DEFAULTS","pivot","center","_options","options","doc","logger","getLogger","root","getRoot","isAnimated","listAnimations","length","listSkins","listScenes","forEach","scene","index","debug","bbox","bounds","max","min","join","offset","offsetNode","createNode","setTranslation","listChildren","child","addChild","t","getTranslation","NAME","colorspace","inputEncoding","info","error","converted","sRGBToLinear","c","Math","pow","updatePrimitive","primitive","color","attribute","getElement","setElement","listMeshes","mesh","listPrimitives","DEDUP_DEFAULTS","propertyTypes","PropertyType","ACCESSOR","MESH","TEXTURE","MATERIAL","dedup","propertyType","includes","indicesAccessors","attributeAccessors","inputAccessors","outputAccessors","meshes","listAttributes","accessor","animation","sampler","listSamplers","input","getInput","output","getOutput","detectDuplicates","accessors","duplicateAccessors","a","aData","BufferUtils","toView","getArray","b","getType","getComponentType","getNormalized","equals","duplicateIndices","Array","from","duplicateAttributes","duplicateInputs","duplicateOutputs","swap","dispose","dedupAccessors","refs","listAccessors","listMaterials","material","numMeshes","uniqueMeshes","src","srcKeyItems","push","createPrimitiveKey","meshKey","targetMesh","listParents","parent","ROOT","dedupMeshes","textures","listTextures","duplicates","bData","aSize","getSize","bSize","entries","dst","property","Root","dedupImages","materials","dedupMaterials","primKeyItems","semantic","listSemantics","getMaterial","listTargets","DEQUANTIZE_DEFAULTS","pattern","dequantize","dequantizePrimitive","createExtension","MeshQuantization","dequantizeAttribute","test","getComponentSize","srcArray","dstArray","Float32Array","il","el","setArray","setNormalized","inspect","scenes","animations","properties","map","sceneBounds","getName","rootName","bboxMin","toPrecision","bboxMax","instances","filter","glPrimitives","verts","semantics","meshIndices","meshAccessors","attr","arrayToType","targ","byteLength","modes","MeshPrimitiveModeLabels","mode","primitives","vertices","sort","attributes","extensions","listExtensions","slots","getGraph","listEdges","ref","getChild","getParent","Texture","ExtensionProperty","alphaMode","getAlphaMode","doubleSided","getDoubleSided","texture","listParentEdges","edge","resolution","ImageUtils","uri","getURI","mimeType","gpuSize","getMemSize","anim","minTime","Infinity","maxTime","getMin","getMax","keyframes","channels","listChannels","samplers","duration","round","toFixed","Number","array","constructor","replace","toLowerCase","INSTANCE_DEFAULTS","instance","batchExtension","MeshGPUInstancing","numBatches","numInstances","meshInstances","traverse","node","getMesh","modifiedNodes","nodes","some","getSkin","batch","createBatch","batchTranslation","batchRotation","batchScale","batchNode","setMesh","setExtension","needsTranslation","needsRotation","needsScale","r","s","getWorldTranslation","getWorldRotation","getWorldScale","MathUtils","eq","pruneUnusedNodes","unusedNodes","pop","getCamera","nodeParent","Node","count","buffer","getBuffer","createAccessor","setType","setBuffer","createInstancedMesh","setAttribute","METALROUGH_DEFAULTS","metalRough","async","listExtensionsUsed","ext","extensionName","warn","iorExtension","MaterialsIOR","specExtension","MaterialsSpecular","specGlossExtension","MaterialsPBRSpecularGlossiness","inputTextures","specGloss","getExtension","specular","createSpecular","setSpecularFactor","setSpecularColorFactor","getSpecularFactor","getSpecularGlossinessTexture","getBaseColorTexture","getMetallicRoughnessTexture","setBaseColorFactor","getDiffuseFactor","setMetallicFactor","setRoughnessFactor","createIOR","setIOR","diffuseTexture","getDiffuseTexture","setBaseColorTexture","getBaseColorTextureInfo","copy","getDiffuseTextureInfo","sgTexture","sgTextureInfo","getSpecularGlossinessTextureInfo","specularTexture","createTexture","setSpecularTexture","setSpecularColorTexture","getSpecularTextureInfo","getSpecularColorTextureInfo","glossinessFactor","getGlossinessFactor","metalRoughTexture","roughness","setMetallicRoughnessTexture","getMetallicRoughnessTextureInfo","tex","PRUNE_DEFAULTS","NODE","SKIN","CAMERA","PRIMITIVE","PRIMITIVE_TARGET","ANIMATION","BUFFER","prune","graph","disposed","listNodes","treeShake","listCameras","indirectTreeShake","channel","getTargetNode","markDisposed","listBuffers","str","prop","p","AnimationChannel","PARTITION_DEFAULTS","partition","existingURIs","meshIndex","isArray","createBuffer","setURI","createBufferURI","primTarget","partitionMeshes","animIndex","partitionAnimations","transform","basename","existing","SIGNED_INT","Int8Array","Int16Array","Int32Array","TRANSLATION","ROTATION","SCALE","WEIGHTS","TargetPath","TRS_CHANNELS","QUANTIZE_DEFAULTS","quantizationVolume","quantizePosition","quantizeNormal","quantizeTexcoord","quantizeColor","quantizeWeight","quantizeGeneric","quantize","nodeTransform","setRequired","getNodeTransform","bboxes","result","expandBounds","getPositionQuantizationVolume","transformMeshParents","quantizePrimitive","srcAttribute","bits","ctor","getQuantizationSettings","dstAttribute","clone","scale","invert","fromTransform","fromScaling","transformMat4","quantizeAttribute","vertexCount","weightsEl","weights","vertexWeightsSum","leastWeight","leastIndex","leastAttribute","attributeIndex","normalizeWeights","Uint16Array","volume","transformMatrix","animChannels","getTargetPath","isParentNode","setSkin","transformSkin","targetNode","setTargetNode","nodeMatrix","getMatrix","multiplyMat4","setMatrix","skin","inverseBindMatrices","getInverseBindMatrices","ibm","setInverseBindMatrices","signBits","quantBits","storageBits","BYTES_PER_ELEMENT","lo","hi","di","abs","sign","getMinNormalized","getMaxNormalized","startsWith","Uint8Array","positions","relativePositions","flatBounds","relMin","relMax","elementSize","fill","tmpMin","tmpMax","fromRotationTranslationScale","RESAMPLE_DEFAULTS","tolerance","resample","context","accessorsVisited","accessorsCountPrev","didSkipMorphTargets","morphTargetSamplers","getSampler","getInterpolation","optimize","values","initial","pending","stack","lastIndexOf","isTransformPending","lastIndex","tmp","writeIndex","time","getScalar","timePrev","timeNext","timeMix","keep","getElementSize","valuePrev","valueNext","setScalar","slice","setInput","setOutput","REORDER_DEFAULTS","reorder","encoder","ready","plan","indicesToAttributes","indicesToMode","attributesToPrimitives","preprocessPrimitives","srcIndices","dstIndices","indicesArray","Uint32Array","remap","unique","reorderMesh","remapAttribute","dstCount","srcCount","SEQUENCE_DEFAULTS","fps","sequence","sequenceNodes","match","createAnimation","animBuffer","inputArray","outputArray","Accessor","Type","VEC3","createAnimationSampler","setInterpolation","AnimationSampler","Interpolation","STEP","createAnimationChannel","setTargetPath","setSampler","addSampler","addChannel","TANGENTS_DEFAULTS","overwrite","tangents","generateTangents","attributeIDs","tangentCache","modified","meshName","meshPrimitives","filterPrimitive","texcoordSemantic","getNormalTexcoord","normal","texcoord","positionID","uuid","normalID","texcoordID","prevTangent","attributeHash","tangent","tangentBuffer","tangentArray","normalTextureInfo","getNormalTextureInfo","getTexCoord","TextureResizeFilter","TEXTURE_RESIZE_DEFAULTS","LANCZOS3","textureResize","maxWidth","maxHeight","srcWidth","srcHeight","dstWidth","dstHeight","floor","srcPixels","dstPixels","ndarray","lanczos3","lanczos2","e","message","UNWELD_DEFAULTS","unweld","visited","unweldAttribute","setIndices","ArrayCtor","WELD_DEFAULTS","weld","weldOnly","weldAndMerge","numVertices","SCALAR","EPSILON","decimalShift","log10","shiftFactor","hashToIndex","dstAttributes","dstIndicesArray","nextIndex","hashElements","hash","srcVertexCount","dstVertexCount","srcAttr","swapAttributes","dstIndicesTypedArray","createArrayOfType","dstAttrElements","dstAttrArrayLength","dstAttrArray","dstAttr","type","canvas","document","createElement","width","height","getContext","imageData","getImageData","handleData","data","Readable","Promise","reject","putImageData","quality","undefined","streamCanvas","promise","resolve","toBlob","blob","arrayBuffer","frame","pick","ops","assign","assigns","stride","_promise","on","event","then","catch","finally","[object Object]","Buffer","path","typeOrCallback","callback","Blob","URL","createObjectURL","img","Image","crossOrigin","onload","revokeObjectURL","drawImage","onerror","err","getPixelsInternal","chunks","internalType","savePixelsInternal","d","arrays","totalByteLength","byteOffset","concat","filterValue","x","xPi","PI","sin","toFixedPoint","filters","srcSize","destSize","use2","scaleInverted","scaleClamped","srcWindow","maxFilterElementSize","packedFilter","packedFilterPtr","destPixel","sourcePixel","sourceFirst","sourceLast","ceil","filterElementSize","floatFilter","fxpFilter","total","pixel","floatValue","filterTotal","leftNotEmpty","rightNotEmpty","filterSize","subarray","clamp","convolve","_","srcY","dstY","filterPtr","dstX","srcX","g","Method","resize","method","ratioY","filtersX","LANCZOS_2","filtersY","tmpTranspose","transpose","dstTranspose","LANCZOS_3"],"version":3,"file":"functions.modern.cacbcf47.js.map","sourceRoot":"/__parcel_source_root/"}